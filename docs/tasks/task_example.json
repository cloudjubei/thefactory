{
  "id": 13,
  "title": "JSON-based tasks format",
  "status": "-",
  "action": "Define and implement a new JSON-based format for tasks to replace `tasks/TASKS.md`. This involves defining the schema, creating necessary tooling for interaction, migrating existing tasks, and finally deprecating the old format.",
  "acceptance": [
    {
      "phase": "Phase 1: Specification & Definition",
      "criteria": [
        "`docs/tasks/task_format.py` exists. It defines the new task structure using concrete Python data types (e.g., `TypedDict`) for `Task`, `Feature`, and related objects, ensuring clear validation and serialization paths.",
        "`docs/tasks/task_example.json` exists, demonstrating a complete task in the new format.",
        "`docs/TASK_FORMAT.md` is moved to `docs/tasks/TASKS_GUIDANCE.md` and updated to remove content now covered by the JSON schema, focusing only on authoring guidance.",
        "`docs/tasks/TASKS_MIGRATION_GUIDE.md` exists, detailing the step-by-step migration plan, backward compatibility strategy, tooling requirements, and rollback plan."
      ]
    },
    {
      "phase": "Phase 2: Tooling & Integration",
      "criteria": [
        "A tool `scripts/tools/task_utils.py` is created with functions to reliably read, create, and update tasks/features in the new JSON format. This will replace direct file I/O for task manipulation.",
        "The Orchestrator (`run_local_agent.py`) is updated to use this new tooling and support a dual-read mode (reading from both `tasks/{id}/task.json` and `tasks/TASKS.md`) during the transition period."
      ]
    },
    {
      "phase": "Phase 3: Migration & Validation",
      "criteria": [
        "All existing tasks and their associated plans and tests are migrated to the new file structure: `tasks/{id}/task.json`, `tasks/{id}/plan.md`, `tasks/{id}/tests/test_{feature_id}.py`.",
        "All tests must pass after migration to confirm correctness."
      ]
    },
    {
      "phase": "Phase 4: Cleanup",
      "criteria": [
        "The dual-read mode in the orchestrator is removed, making the JSON format the sole source of truth.",
        "`tasks/TASKS.md` is removed from the repository."
      ]
    }
  ],
  "features": [
    {
      "id": "13.1",
      "title": "Define Task Schema in Python",
      "status": "+",
      "action": "Create `docs/tasks/task_format.py` to define the new task structure using Python's `TypedDict` or similar data classes. This will serve as the canonical schema for tasks, features, and related objects.",
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python types for `Task`, `Feature`, and other relevant data structures.",
        "The types cover all fields currently used in `TASKS.md` and `plan.md` files."
      ],
      "dependencies": [],
      "output": "`docs/tasks/task_format.py`"
    },
    {
      "id": "13.2",
      "title": "Create Example JSON Task File",
      "status": "-",
      "action": "Create `docs/tasks/task_example.json` that demonstrates a complete task in the new format, adhering to the schema defined in `task_format.py`.",
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The JSON is valid and conforms to the structure defined in `docs/tasks/task_format.py`."
      ],
      "dependencies": ["13.1"],
      "output": "`docs/tasks/task_example.json`"
    }
  ]
}