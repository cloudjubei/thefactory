{
  "id": 1,
  "status": "+",
  "title": "Task Management System Definition",
  "action": "Define and maintain the core components of the agent's task management system. This task serves as the canonical source of truth for task structure, guidance, and tooling.",
  "plan": "This meta-task consolidates the definitions and references for the entire task-driven workflow. Its features point to the key artifacts that govern how tasks are defined, authored, and processed.",
  "features": [
    {
      "id": "1.1",
      "status": "+",
      "title": "Canonical Task Schema",
      "action": "Define and maintain the canonical schema for tasks in `docs/tasks/task_format.py` using Python's TypedDict.",
      "plan": "1. The `docs/tasks/task_format.py` file serves as the single source of truth for the data structures of `Task` and `Feature` objects. 2. Any changes to the task format must be reflected here first.",
      "context": [
        "docs/tasks/task_format.py"
      ],
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python TypedDicts for `Task` and `Feature`.",
        "The schema covers all required and optional fields for tasks and features."
      ]
    },
    {
      "id": "1.2",
      "status": "+",
      "title": "Task Authoring Guidance",
      "action": "Provide clear guidance for authoring and maintaining tasks in `docs/tasks/TASKS_GUIDANCE.md`.",
      "plan": "1. The guidance document should focus on best practices for writing tasks, features, plans, and acceptance criteria. 2. It must reference the canonical schema, example file, and utility tools rather than duplicating their content.",
      "context": [
        "docs/tasks/TASKS_GUIDANCE.md"
      ],
      "acceptance": [
        "`docs/tasks/TASKS_GUIDANCE.md` exists.",
        "The document references `docs/tasks/task_format.py` for the schema.",
        "The document references `docs/tasks/task_example.json` as an example.",
        "The document references `scripts/tools/task_utils.py` for tooling."
      ]
    },
    {
      "id": "1.3",
      "status": "+",
      "title": "Example Task File",
      "action": "Maintain a complete and valid example task file at `docs/tasks/task_example.json`.",
      "plan": "1. This file serves as a practical, copy-pasteable template for new tasks. 2. It must always be kept in sync with the canonical schema defined in `task_format.py`.",
      "context": [
        "docs/tasks/task_example.json",
        "docs/tasks/task_format.py"
      ],
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The file contains a valid JSON object.",
        "The JSON object structure conforms to the `Task` schema."
      ]
    },
    {
      "id": "1.4",
      "status": "+",
      "title": "Task Utility Tooling",
      "action": "Provide and maintain utility functions for programmatic interaction with task files in `scripts/tools/task_utils.py`.",
      "plan": "1. The `task_utils.py` module abstracts file I/O and manipulation of task JSON files. 2. It provides reliable functions for reading, creating, and updating tasks and features, which are used by the orchestrator and potentially by the agent.",
      "context": [
        "scripts/tools/task_utils.py",
        "docs/tasks/task_format.py"
      ],
      "acceptance": [
        "`scripts/tools/task_utils.py` exists.",
        "it directly references the interface schema from `task_format.py`",
        "It provides the function `create_task`",
        "It provides the function `get_task`",
        "It provides the function `update_task`",
        "It provides the function `move_task`",
        "It provides the function `update_task_status`",
        "It provides the function `update_feature_status`",
        "It provides the function `set_agent_question`"
      ]
    },
    {
      "id": "1.5",
      "status": "+",
      "title": "File Organisation specification",
      "action": "Create a scheme for organising files within the repository.",
      "plan": "1. Create the file `docs/FILE_ORGANISATION.md`. 2. Add the required sections: `Top-Level Directory Layout`, `File Naming Conventions`, and `Evolution Guidance`. 3. Populate each section with clear, concise guidelines and examples relevant to this project structure.",
      "acceptance": [
        "`docs/FILE_ORGANISATION.md` exists",
        "It includes clearly titled sections: `Top-Level Directory Layout`, `File Naming Conventions`, `Evolution Guidance` and Example tree (illustrative) - showing in a `graphical` way the file structure",
        "Each section provides concise explanations and examples where helpful"
      ]
    },
    {
      "id": "1.6",
      "status": "+",
      "title": "Testing",
      "action": "Establish the canonical, project-wide testing specification and integrate testing requirements into the planning specification so every feature is verifiable by deterministic tests.",
      "plan": "1. Create the file `docs/TESTING.md`. 2. Define the project's testing philosophy, scope, and structure. 3. Specify file locations (`tasks/{id}/tests/`) and naming conventions (`test_{task_id}_{feature_id}.py`). 4. Document testing tools (`run_tests`) and the development workflow.",
      "acceptance": [
        "`docs/TESTING.md` exists describing the philosophy, scope, structure, location, naming conventions, tooling, and workflow for tests in this project."
      ]
    },
    {
      "id": "1.7",
      "status": "+",
      "title": "Tools guide",
      "action": "Specify the JSON contract, tools, and execution modes",
      "plan": "",
      "acceptance": [
        "`docs/TOOL_ARCHITECTURE.md` exists with all sections and tool definitions"
      ]
    },
    {
      "id": "1.8",
      "status": "+",
      "title": "principles guide",
      "action": "Define core principles.",
      "plan": "",
      "acceptance": [
        "`docs/AGENT_PRINCIPLES.md` exists and contains required definitions referencing the tools guide."
      ]
    },
    {
      "id": "1.9",
      "status": "-",
      "title": "Agent personas",
      "action": "Create 3 personas that will serve different purposes:",
      "context": ["docs/AGENT_PRINCIPLES.md"],
      "acceptance": [
        "`docs/AGENT_PERSONAS_PLANNER.md` exists - Describes an agent that looks at the task description and creates a plan for completing a task following the given specifications. This agent is the one that can edit the plan descriptions.",
        "`docs/AGENT_PERSONAS_TESTER.md` exists - Describes an agent that looks at the task description, and then for each feature creates the most appropriate acceptance criteria. Based on that criteria the agent creates a test case for each feature. This agent is the one that can edit the tests - no one else can.",
        "`docs/AGENT_PERSONAS_DEVELOPER.md` exists - Describes an agent that looks at the task description, and for each feature, looks at the acceptance criteria, and develops the necesary result that satisfies the acceptance criteria. They can never edit tests or acceptance criteria, only run them to confirm whether they've satisfied the acceptance criteria."
      ]
    },
    {
      "id": "1.10",
      "status": "-",
      "title": "Plan specification for Planner",
      "action": "Create a specification for the planner task that describes how to create a task with features that clearly describe the full scope of the task, and how to create a plan for each feature.",
      "context": ["docs/tasks/task_format.py", "docs/tasks/task_example.json", "docs/tasks/TASKS_GUIDANCE.md", "docs/TOOL_ARCHITECTURE.md", "docs/AGENT_PRINCIPLES.md", "docs/AGENT_PERSONAS_PLANNER.md"],
      "acceptance": [
        "`docs/PLAN_SPECIFICATION_PLANNER.md` exists",
        "The document references `docs/tasks/task_format.py` for the task schema",
        "The document references `docs/tasks/task_example.json` for the task example",
        "The document references `docs/tasks/TASKS_GUIDANCE.md` for task specific guidance",
        "The document references `docs/TOOL_ARCHITECTURE.md` for tooling guidance",
        "The document references `docs/AGENT_PRINCIPLES.md` for agent behaviour guidance",
        "The document references `docs/AGENT_PERSONAS_PLANNER.md` for agent planner guidance",
        "The document explains that creating a task with features that clearly describe the full scope of the task is mandatory",
        "The document explains that the task requires a generic high level plan",
        "The document explains that each feature requires a step-by-step plan that should make it easy to implement for an LLM",
        "The document explains that each feature requires gathering a minimal context that is required per feature"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3",
        "1.4",
        "1.5",
        "1.6",
        "1.7",
        "1.8",
        "1.9"
      ]
    },
    {
      "id": "1.11",
      "status": "-",
      "title": "Plan specification for Tester",
      "action": "Create a specification for the tester task that describes how to create acceptance criteria for each feature, and in turn the tests that verify the acceptance criteria.",
      "context": ["docs/tasks/task_format.py", "docs/tasks/task_example.json", "docs/tasks/TASKS_GUIDANCE.md", "docs/TOOL_ARCHITECTURE.md", "docs/AGENT_PRINCIPLES.md", "docs/AGENT_PERSONAS_TESTER.md", "docs/TESTING.md"],
      "acceptance": [
        "`docs/PLAN_SPECIFICATION_TESTER.md` exists",
        "The document references `docs/tasks/task_format.py` for the task schema",
        "The document references `docs/tasks/task_example.json` for the task example",
        "The document references `docs/tasks/TASKS_GUIDANCE.md` for task specific guidance",
        "The document references `docs/TOOL_ARCHITECTURE.md` for tooling guidance",
        "The document references `docs/AGENT_PRINCIPLES.md` for agent behaviour guidance",
        "The document references `docs/AGENT_PERSONAS_TESTER.md` for agent tester guidance",
        "The document references `docs/TESTING.md` for agent personas guidance",
        "The document explains that each feature requires rigorous and atomic acceptance criteria",
        "The document explains that each feature requires tests written that match each acceptance criteria",
        "The document explains that the task status needs to be updated when work is not finished",
        "The document explains that each feature status needs to be updated when work is not finished"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3",
        "1.4",
        "1.5",
        "1.6",
        "1.7",
        "1.8",
        "1.9"
      ]
    },
    {
      "id": "1.12",
      "status": "-",
      "title": "Plan specification for Developer",
      "action": "Create a specification for the developer task that describes how to implement each feature.",
      "context": ["docs/tasks/task_format.py", "docs/tasks/task_example.json", "docs/tasks/TASKS_GUIDANCE.md", "docs/TOOL_ARCHITECTURE.md", "docs/AGENT_PRINCIPLES.md", "docs/AGENT_PERSONAS_DEVELOPER.md", "docs/TESTING.md"],
      "acceptance": [
        "`docs/PLAN_SPECIFICATION_TESTER.md` exists",
        "The document references `docs/tasks/task_format.py` for the task schema",
        "The document references `docs/tasks/task_example.json` for the task example",
        "The document references `docs/tasks/TASKS_GUIDANCE.md` for task specific guidance",
        "The document references `docs/TOOL_ARCHITECTURE.md` for tooling guidance",
        "The document references `docs/AGENT_PRINCIPLES.md` for agent behaviour guidance",
        "The document references `docs/AGENT_PERSONAS_DEVELOPER.md` for agent developer guidance",
        "The document references `docs/TESTING.md` for agent personas guidance",
        "The document explains that the task status is updated to in progress",
        "The document explains that for each feature that is worked on the status is updated to in progress",
        "The document explains that for each feature the context needs to be gathered",
        "The document explains that for each feature the plan needs to be carried out",
        "The document explains that for each feature the task isn't deemed done until all tests pass",
        "The document explains that for each feature the status needs to be updated when work is finished",
        "The document explains that the task status needs to be updated when work is finished"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3",
        "1.4",
        "1.5",
        "1.6",
        "1.7",
        "1.8",
        "1.9"
      ]
    }
  ]
}