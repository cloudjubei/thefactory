{
  "id": 1,
  "status": "+",
  "title": "Task Management System Definition",
  "action": "Define and maintain the core components of the agent's task management system. This task serves as the canonical source of truth for task structure, guidance, and tooling.",
  "plan": "This meta-task consolidates the definitions and references for the entire task-driven workflow. Its features point to the key artifacts that govern how tasks are defined, authored, and processed.",
  "features": [
    {
      "id": "1.1",
      "status": "+",
      "title": "Canonical Task Schema",
      "action": "Define and maintain the canonical schema for tasks in `docs/tasks/task_format.py` using Python's TypedDict.",
      "plan": "1. The `docs/tasks/task_format.py` file serves as the single source of truth for the data structures of `Task` and `Feature` objects. 2. Any changes to the task format must be reflected here first.",
      "context": [
        "docs/tasks/task_format.py"
      ],
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python TypedDicts for `Task` and `Feature`.",
        "The schema covers all required and optional fields for tasks and features."
      ]
    },
    {
      "id": "1.2",
      "status": "+",
      "title": "Example Task File",
      "action": "Maintain a complete and valid example task file at `docs/tasks/task_example.json`.",
      "plan": "1. This file serves as a practical, copy-pasteable template for new tasks. 2. It must always be kept in sync with the canonical schema defined in `task_format.py`.",
      "context": [
        "docs/tasks/task_format.py"
      ],
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The file contains a valid JSON object.",
        "The JSON object structure conforms to the `Task` schema."
      ],
      "dependencies": [
        "1.1"
      ]
    },
    {
      "id": "1.3",
      "status": "+",
      "title": "File Organisation specification",
      "action": "Create a scheme for organising files within the repository.",
      "plan": "1. Create the file `docs/FILE_ORGANISATION.md`. 2. Add the required sections: `Top-Level Directory Layout`, `File Naming Conventions`, and `Evolution Guidance`. 3. Populate each section with clear, concise guidelines and examples relevant to this project structure.",
      "acceptance": [
        "`docs/FILE_ORGANISATION.md` exists",
        "It includes clearly titled sections: `Top-Level Directory Layout`, `File Naming Conventions`, `Evolution Guidance` and Example tree (illustrative) - showing in a `graphical` way the file structure",
        "Each section provides concise explanations and examples where helpful"
      ]
    },
    {
      "id": "1.4",
      "status": "+",
      "title": "Testing",
      "action": "Establish the canonical, project-wide testing specification and integrate testing requirements into the planning specification so every feature is verifiable by deterministic tests.",
      "plan": "1. Create the file `docs/TESTING.md`. 2. Define the project's testing philosophy, scope, and structure. 3. Specify file locations (`tasks/{id}/tests/`) and naming conventions (`test_{task_id}_{feature_id}.py`). 4. Document testing tools (`run_tests`) and the development workflow.",
      "acceptance": [
        "`docs/TESTING.md` exists describing the philosophy, scope, structure, location, naming conventions, tooling, and workflow for tests in this project."
      ]
    },
    {
      "id": "1.5",
      "status": "+",
      "title": "Agent communication porotocol",
      "action": "Create a file that specifies the json format that an agent needs to return so that it's possible to  have a multi-step conversation and an agent can call tools",
      "plan": "",
      "context": [],
      "acceptance": [
        "A document `docs/AGENT_COMMUNICATION_PROTOCOL.md` exists explaining the protocol",
        "`docs/agent_protocol_format.json` exists containg a valid JSON object defining the format for agent responses."
      ]
    },
    {
      "id": "1.6",
      "status": "+",
      "title": "Plan specification for Planner",
      "action": "Create a specification for the Planner task that describes how to create a task with features that clearly describe the full scope of the task, and how to create a plan for each feature. This document is meant to be directly passed to a planner agent and alongside `docs/AGENT_PERSONAS_PLANNER.md` serve as their starting point and guide.",
      "context": [
        "docs/tasks/task_format.py",
        "docs/tasks/task_example.json",
        "docs/AGENT_COMMUNICATION_PROTOCOL.md",
        "docs/agent_protocol_format.json"
      ],
      "acceptance": [
        "`docs/AGENT_PLANNER.md` exists",
        "The document describes an agent that looks at the task description and creates a plan for completing a task following the given specifications.",
        "The document references `docs/tasks/task_format.py` for the task schema",
        "The document references `docs/tasks/task_example.json` for the task example",
        "The document references `docs/AGENT_COMMUNICATION_PROTOCOL.md` and `docs/agent_protocol_format.json` to exlain how the communication protocol works and how to respond",
        "The document has a section `Tools` that list and describe all tools this agent can use: `create_task(task:Task)->Task`, `create_feature(feature:Feature)->Feature`, `update_task(id:int,title:str,action:str,plan:str)->Task`, `update_feature(task_id:int,feature_id:str,title:str,action:str,context:[str],plan:str)->Feature`, `update_agent_question(task_id:int,feature_id:str?,question:str)`",
        "The document explains that creating a task with features that clearly describe the full scope of the task is mandatory - `create_task` tool is used for this",
        "The document explains that creating features that are missing for the task to be complete is mandatory - `create_feature` tool is used for this",
        "The document explains that the task requires a generic high level plan - `update_task` tool is used for this",
        "The document explains that each feature requires a step-by-step plan that should make it easy to implement for an LLM - `update_feature` tool is used for this",
        "The document explains that each feature requires gathering a minimal context that is required per feature - `update_feature` tool is used for this",
        "The document explains that if there's any unresolved issue - the `update_agent_question` tool is used for this"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3"
      ]
    },
    {
      "id": "1.7",
      "status": "+",
      "title": "Plan specification for Tester",
      "action": "Create a specification for the tester task that describes how to create acceptance criteria for each feature, and in turn the tests that verify the acceptance criteria. This document is meant to be directly passed to a tester agent and alongside `docs/AGENT_PERSONAS_TESTER.md` serve as their starting point and guide.",
      "context": [
        "docs/TESTING.md",
        "docs/AGENT_COMMUNICATION_PROTOCOL.md",
        "docs/agent_protocol_format.json"
      ],
      "acceptance": [
        "`docs/AGENT_TESTER.md` exists",
        "The document references `docs/TESTING.md` for testing guidance",
        "The document references `docs/AGENT_COMMUNICATION_PROTOCOL.md` and `docs/agent_protocol_format.json` to exlain how the communication protocol works and how to respond",
        "The document has a section `Tools` that list and describe all tools this agent can use: `get_test(task_id:int,feature_id:str)->str?`, `update_acceptance_criteria(task_id:int,feature_id:str,acceptance_criteria:[str])->Feature`, `update_test(task_id:int,feature_id:str,test:str)`, `delete_test(task_id:int,feature_id:str)`, `run_test(task_id:int,feature_id:str)->TestResult`, `update_task_status(task_id:int,status:Status)->Task`, `update_feature_status(task_id:int,feature_id:str,status:Status)->Feature`, `update_agent_question(task_id:int,feature_id:str?,question:str)`",
        "The document explains that for each feature the required context needs to be gathered, for this persona it means the test for that feature - `get_test` tool is used for this, but this should be directly passed in the initial context",
        "The document explains that each feature requires rigorous and atomic acceptance criteria - `update_acceptance_criteria` tool is used for this",
        "The document explains that each feature requires tests written that match each acceptance criteria - `update_test`, `delete_test` tools are used for this",
        "The document explains that the tester can run tests - `run_test` tool is used for this",
        "The document explains that the task status needs to be updated when work is not finished - `update_task_status` tool is used for this",
        "The document explains that each feature status needs to be updated when work is not finished - `update_feature_status` tool is used for this",
        "The document explains that if there's any unresolved issue - the `update_agent_question` tool is used for this"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3",
        "1.4"
      ]
    },
    {
      "id": "1.8",
      "status": "+",
      "title": "Plan specification for Developer",
      "action": "Create a specification for the developer task that describes how to implement each feature. This document is meant to be directly passed to a tester agent and alongside `docs/AGENT_PERSONAS_DEVELOPER.md` serve as their starting point and guide.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/AGENT_COMMUNICATION_PROTOCOL.md",
        "docs/agent_protocol_format.json"
      ],
      "acceptance": [
        "`docs/AGENT_DEVELOPER.md` exists",
        "The document references `docs/AGENT_PERSONAS_DEVELOPER.md` for agent developer guidance",
        "The document references `docs/FILE_ORGANISATION.md` for file structure guidance",
        "The document references `docs/AGENT_COMMUNICATION_PROTOCOL.md` and `docs/agent_protocol_format.json` to exlain how the communication protocol works and how to respond",
        "The document has a section `Tools` that list and describe all tools this agent can use: `get_context(files:[str])->[str]`, `write_file(filename:str,content:str)`,`run_test(task_id:int,feature_id:str)->TestResult`, `update_task_status(task_id:int,status:Status)->Task`, `update_feature_status(task_id:int,feature_id:str,status:Status)->Feature`, `finish_feature(task_id:int,feature_id:str)->Feature`, `finish(task_id:int)->Task`, `update_agent_question(task_id:int,feature_id:str?,question:str)`,`update_agent_question(task_id:int,feature_id:str?,question:str)`",
        "The document explains that the task status is updated to in progress - `update_task_status` tool is used for this",
        "The document explains that for each feature that is worked on the status is updated to in progress - `update_feature_status` tool is used for this",
        "The document explains that for each feature the context needs to be gathered - `get_context` tool is used for this, but this should be directly passed in the initial context and should only be used in very rare cases",
        "The document explains that for each feature the plan needs to be carried out - `write_file` tool is used for writing any files",
        "The document explains that for each feature the task isn't deemed done until all tests pass - `run_test` tool is used for this",
        "The document explains that for each feature the status needs to be updated when work is finished - `update_feature_status` tool is used for this",
        "The document explains that the task status needs to be updated when work is finished - `update_task_status` tool is used for this",
        "The document explains that if the work for the agent is done on a feature the `finish_feature` MUST BE USED",
        "The document explains that if the work for the agent is done on a task the `finish` MUST BE USED",
        "The document explains that if there's any unresolved issue - the `update_agent_question` tool is used for this"
      ],
      "dependencies": [
        "1.1",
        "1.2",
        "1.3",
        "1.4"
      ]
    }
  ]
}
