{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work.",
  "features": [
    {
      "id": "3.1",
      "status": "-",
      "title": "Document submodule workflow for child projects",
      "description": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "1. **Locate Documentation File**: Identify the correct location for the documentation, which is `docs/PROJECTS_GUIDE.md`, as specified in `docs/FILE_ORGANISATION.md`.\n2. **Review Existing Content**: Read through the existing content of `docs/PROJECTS_GUIDE.md`.\n3. **Verify Requirements Coverage**: Confirm that the document thoroughly covers all the required topics mentioned in the feature description:\n    - Cloning a repository with submodules.\n    - Initializing submodules post-clone.\n    - Adding a new child project as a submodule.\n    - Updating submodules to newer commits.\n    - Removing a submodule.\n    - Common pitfalls and best practices.\n4. **Confirm Completion**: Based on the provided context, the file `docs/PROJECTS_GUIDE.md` already exists and is complete, satisfying all the feature requirements.\n5. **Finalize**: Since the deliverable for this feature is already present and correct in the codebase, no further changes are needed. The feature implementation is complete.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md"
      ],
      "acceptance": [
        "A Markdown document exists at docs/PROJECTS_GUIDE.md describing how child projects under the projects/ directory are managed as git submodules.",
        "docs/FILE_ORGANISATION.md is updated to reference/include the new docs/PROJECTS_GUIDE.md file.",
        "docs/PROJECTS_GUIDE.md contains an Overview section explaining the purpose of the projects/ folder and that each child project is a git submodule.",
        "docs/PROJECTS_GUIDE.md provides instructions for cloning the repository with submodules using: git clone --recurse-submodules; and for initializing submodules in an existing clone using git submodule init and git submodule update (including the combined git submodule update --init --recursive variant).",
        "docs/PROJECTS_GUIDE.md explains how to add a new child project as a submodule under projects/<name> using git submodule add -b <branch> <url> projects/<name>, and explicitly mentions committing both .gitmodules and the submodule pointer update in the superproject.",
        "docs/PROJECTS_GUIDE.md explains how to update submodules to newer commits using either git submodule update --remote [--recursive] or by entering the submodule and pulling, then committing the pointer bump in the superproject. It includes examples of git submodule foreach for bulk operations.",
        "docs/PROJECTS_GUIDE.md explains how to switch the tracked branch for a submodule via git config -f .gitmodules submodule.projects/<name>.branch <branch> and notes committing .gitmodules.",
        "docs/PROJECTS_GUIDE.md explains how to remove a child project submodule, including the steps: git submodule deinit -f projects/<name>, git rm -f projects/<name>, and removing the .git/modules/projects/<name> directory, and notes that .gitmodules is updated and committed accordingly.",
        "docs/PROJECTS_GUIDE.md contains a Common pitfalls section that explicitly mentions: detached HEAD in submodules; uncommitted changes in submodules; mixing SSH and HTTPS URLs; forgetting to commit .gitmodules; not committing the submodule pointer update; needing git submodule sync when URLs change; and ensuring CI uses --init --recursive.",
        "docs/PROJECTS_GUIDE.md contains a CI/CD notes section showing recommended commands to fetch submodules in automation: git clone --recurse-submodules and/or git submodule update --init --recursive.",
        "docs/PROJECTS_GUIDE.md includes a Troubleshooting section mentioning git submodule sync (preferably with --recursive) and git submodule status usage.",
        "docs/PROJECTS_GUIDE.md includes a Quick reference or cheat sheet that summarizes the most common commands for clone/init, add, update, switch branch, remove, and status.",
        "All examples use paths under projects/ and illustrate projects/<name> for submodules, and the document makes clear that changes inside a submodule should be committed within the submodule and then the superproject pointer updated and committed.",
        "docs/PROJECTS_GUIDE.md references and demonstrates the following commands at least once: git clone --recurse-submodules; git submodule init; git submodule update; git submodule update --init --recursive; git submodule add -b; git submodule update --remote; git submodule foreach; git submodule status; git config -f .gitmodules submodule.projects/<name>.branch <branch>; git submodule deinit -f; git rm -f projects/<name>; rm -rf .git/modules/projects/<name>; git submodule sync.",
        "docs/PROJECTS_GUIDE.md discusses authentication schemes (SSH vs HTTPS) and warns about mixing them across submodules and CI."
      ]
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Script: Child projects structure generation and other various utils and helpers",
      "description": "The script generates the new child projects within the projects/ folder. It sets up a folder with an initial empty task so that it's possible to start planning the feature out. It also creates a git repository for it and links it via submodules to this project.",
      "plan": "1.  **Create Script File**: Create a new shell script at `scripts/create_project.sh`.\n2.  **Implement Argument Handling**: The script must accept one argument: the name of the new project. It should perform validation to ensure the name is provided and that a project with that name doesn't already exist in the `projects/` directory.\n3.  **Create Project Directory**: Create a new directory inside `projects/` using the provided project name.\n4.  **Initialize Project Structure**: Inside the new project directory, create a `tasks/` subdirectory. Inside `tasks/`, create an initial empty task file, e.g., `001_initial_setup.md`. Also, create a basic `README.md` file in the project's root.\n5.  **Initialize Git Repository**: Run `git init` within the newly created project directory to turn it into a git repository.\n6.  **Create Initial Commit**: In the new project's repository, add all the newly created files (`README.md`, `tasks/001_initial_setup.md`) and create an initial commit with a message like 'Initial project structure'.\n7.  **Add as Git Submodule**: From the root of the main project, execute the `git submodule add` command to add the new project as a submodule. The path will be a local one, for example: `git submodule add ./projects/<project-name> projects/<project-name>`.\n8.  **Commit Submodule Addition**: In the main project's repository, commit the changes related to adding the new submodule (the new `.gitmodules` entry and the submodule link). The commit message should be descriptive, like 'feat: Add new child project <project-name>'.\n9.  **Add Documentation**: Add a section to the main `README.md` or a new document explaining how to use the `scripts/create_project.sh` script.\n10. **Set Permissions**: Ensure the script is executable by running `chmod +x scripts/create_project.sh`.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md",
        "scripts/child_project_utils.py"
      ],
      "acceptance": [
        "A CLI entry point exists to generate a child project `scripts.child_project_utils` that accepts at minimum: project_name (required), and optionally: description, repo_url (for remote origin), and path (defaulting to projects/).",
        "When invoked with a new project_name, the script creates a directory at projects/{project_name}. If the directory already exists, the script exits with a non-zero code and a clear error message without modifying existing contents.",
        "Inside the new child project, the script creates a minimal structure including: a README.md with the provided name/description, a tasks/ directory containing an initial task file (e.g., tasks/000_initial_task.md) with placeholder content, and a .gitignore with typical Python/node/temp artifacts (or inherits from a template if present).",
        "The script initializes a new git repository inside the child project directory (independent repo): `.git/` exists, `git status` is clean after initial commit, and the initial commit includes the scaffolded files.",
        "If a repo_url is provided, it is set as the `origin` remote in the child project's git repo.",
        "The root repository is updated to include the new child project as a git submodule at projects/{project_name}. The .gitmodules file is updated accordingly with the correct path and URL (if repo_url provided) or with a local path URL if not provided.",
        "Re-running the script for the same project_name is idempotent and fails fast with a clear message without altering existing submodule configuration.",
        "The script provides a `--dry-run` option that prints planned actions (paths to create, git commands to run) and makes no filesystem or git changes when used.",
        "The script returns exit code 0 on success and non-zero on failure; errors include actionable messages (e.g., missing git, invalid name, non-empty target path).",
        "A help/usage message is available via `-h/--help` describing arguments, options, examples, and behavior."
      ]
    }
  ]
}