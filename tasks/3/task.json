{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work. The first project is `Docker`. We want to be able to run any project (including this + any child project) in a docker environment. It needs to be extremely easy to launch this - ideally a single function call to get it launched and then whatever function call needs to be called inside the running container. As a first example we should be able to launch this project in docker and call `run.py` to launch an agent exactly as defined in `LOCAL_SETUP.md`. There needs to be a step-by-step guide for this that exactly explains it.",
  "features": [
    {
      "id": "3.1",
      "status": "-",
      "title": "Update .gitignore to ignore projects/ directory and contents",
      "description": "Add .gitignore rules so the projects/ folder (which contains child projects as git submodules) and all files within it are ignored by the main repository, while ensuring submodule tracking via .gitmodules and gitlinks remains intact.",
      "plan": "Implementation plan for feature 3.1: Update .gitignore to ignore projects/ directory and contents\n\n1) Preparation\n- Confirm the repository uses a top-level directory named \"projects\" for child projects.\n- Decide whether the repository must keep an empty projects/ directory tracked (e.g., via a .gitkeep). If not required, ignore everything. If required, add an exception for a single placeholder file.\n\n2) Update .gitignore\n- Locate the root .gitignore file. If it does not exist, create it at the repository root.\n- Open .gitignore and add a new section (avoid duplicating existing rules):\n  # Ignore child projects directory\n  /projects/\n- Notes:\n  - Use forward slashes; Git ignores are POSIX-style regardless of OS.\n  - The leading slash scopes the rule to the repository root so only the top-level projects/ is ignored.\n\n3) Optional: keep a placeholder tracked (only if needed)\n- If the team requires the directory to exist in the repo while ignoring its contents, add an exception rule under the above lines:\n  !/projects/.gitkeep\n- Do NOT add this exception unless we also intend to commit a projects/.gitkeep file in a separate task. This feature only adjusts .gitignore.\n\n4) Validate locally\n- Create a temporary file for verification: echo \"test\" > projects/_ignore_me.txt\n- Run: git status\n  - Expected: projects/_ignore_me.txt should not appear in the status output.\n- If an exception for .gitkeep was added in step 3, create an empty projects/.gitkeep and run: git add projects/.gitkeep\n  - Expected: .gitkeep is tracked while all other files under projects/ remain ignored.\n- Optionally run: git check-ignore -v projects/_ignore_me.txt to confirm the rule and source line.\n\n5) Edge cases and conflicts\n- Ensure there are no un-ignore rules (e.g., !/projects/*) elsewhere in .gitignore that would counteract this.\n- If prior rules existed for projects/, consolidate into a single clear rule to avoid confusion.\n\n6) Documentation\n- Update developer docs/README (in a separate docs task if necessary) to clarify that all child projects live under projects/ and are ignored by default.\n\n7) Acceptance criteria\n- .gitignore contains an entry that ignores the top-level projects/ directory and all its contents.\n- Creating files under projects/ does not show them in git status.\n- No unintended files outside projects/ are affected.\n\n8) Rollback plan\n- If needed, remove the /projects/ rule from .gitignore and commit the change.\n- Run git rm -r --cached projects/ to re-track the directory and its contents if previously ignored.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Document submodule workflow for child projects",
      "description": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "Feature: Document submodule workflow for child projects\n\nGoal\n- Provide a clear, authoritative guide for managing child projects as Git submodules in the parent repository, covering onboarding, daily operations, maintenance, CI/CD, auth, governance, versioning, and troubleshooting.\n\nAssumptions\n- Child projects live as Git submodules under the designated directory `projects/`. Adjust names to actual repo conventions during authoring.\n- Git v2.31+ and SSH access (recommended) or HTTPS with PAT are available to developers and CI.\n\nScope\n- Documentation only (primary). Optionally include small helper scripts and hooks to standardize developer operations.\n\nPlan and Steps\n\nPhase 1: Align on conventions and prerequisites\n1) Confirm directory structure and naming: decide the canonical path for submodules (e.g., children/<child-name>/) and naming conventions.\n2) Define submodule configuration policy:\n   - Tracking branch default (e.g., main) via .gitmodules submodule.<path>.branch.\n   - Shallow checkouts (shallow = true) where appropriate.\n   - Prefer SSH URLs (recommended) and provide HTTPS alternative.\n   - Decide on nested submodules policy (allow/avoid).\n3) Define versioning policy:\n   - Pin to tags for releases; pin to branch heads for ongoing development.\n   - Tagging strategy and compatibility expectations.\n4) Define governance and ownership:\n   - How CODEOWNERS applies to submodule paths.\n   - Approval requirements when bumping submodule pointers.\n5) Document required tools and access:\n   - Git version; SSH keys or PAT; org permissions.\n\nDeliverable: A concise \u201cSubmodule policy\u201d section to include at the top of the document.\n\nPhase 2: Author primary documentation (docs/child-projects/submodules.md)\nStructure and content:\n1) Overview and scope\n   - Why submodules are used; pros/cons; when to use.\n   - Repo structure diagram (textual tree) showing parent and children.\n2) Quickstart (fresh clone)\n   - Commands: git clone, git submodule update --init --recursive, optional config: git config submodule.recurse true.\n   - Verifying status: git submodule status.\n3) Daily workflows\n   a) Add a new child project\n      - Command sequence:\n        - git submodule add -b <branch> <ssh-url> children/<name>\n        - git config -f .gitmodules submodule.children/<name>.branch <branch>\n        - Optional shallow: git config -f .gitmodules submodule.children/<name>.shallow true\n        - git add .gitmodules children/<name>\n        - git commit -m \"Add submodule: <name> at <branch>\"\n      - Notes: URL conventions; .gitmodules review; CODEOWNERS update.\n   b) Update a child to latest\n      - Quick path: git submodule update --remote --merge children/<name>\n      - Manual path: cd children/<name>; git fetch; git checkout <branch-or-tag>; cd -; git add children/<name>; git commit -m \"Bump <name> to <ref>\"\n      - Locking to a tag vs tracking a branch.\n   c) Work on a child repo (feature development)\n      - cd children/<name>; git switch -c feat/x; implement; push; open PR in child repo; merge there; then bump pointer in parent with a commit message referencing the child PR.\n   d) Coordinated multi-repo change\n      - Create matching branches in each child and the parent; open cross-referenced PRs; order of merges; then fast-forward parent pointers; include rollback strategy.\n   e) Verify and commit submodule pointer changes\n      - git status shows modified content at path; ensure no local dirty state in submodules; commit pointer updates.\n4) Maintenance workflows\n   a) Remove a submodule\n      - Commands:\n        - git submodule deinit -f children/<name>\n        - rm -rf .git/modules/children/<name>\n        - git rm -f children/<name>\n        - git commit -m \"Remove submodule <name>\"\n        - Verify .gitmodules updated; if needed remove leftover config sections: git config -f .git/config --remove-section submodule.children/<name> || true\n   b) Rename a submodule path\n      - git mv children/<old> children/<new>; update .gitmodules path entry; git submodule sync --recursive; git add .gitmodules; git commit.\n   c) Migrate an existing folder to a submodule (history preserved)\n      - Option A (subtree split):\n        - git subtree split -P children/<name> -b export/<name>\n        - Create new repo; push: git push <new-url> export/<name>:main\n        - Remove folder; add as submodule per step 3a.\n      - Option B (git filter-repo) with equivalent steps if allowed.\n5) CI/CD considerations\n   - GitHub Actions:\n     - Use actions/checkout@v4 with: submodules: recursive, fetch-depth: 0; set ssh-key or token for private submodules.\n     - Example:\n       - uses: actions/checkout@v4\n         with:\n           submodules: recursive\n           fetch-depth: 0\n           ssh-key: ${{ secrets.DEPLOY_KEY }}\n   - GitLab CI:\n     - before_script: git submodule sync --recursive && git submodule update --init --recursive\n     - Ensure GIT_SSH_COMMAND or CI_JOB_TOKEN auth setup.\n   - Caching strategies; pin to tags for release builds.\n6) Authentication for private submodules\n   - Recommended: SSH with org deploy keys or user keys; URL standardization using git config url.ssh://git@github.com/.insteadOf https://github.com/\n   - Alternative: HTTPS with fine-grained PAT; update Actions secrets and CI variable usage.\n7) Versioning and release management\n   - Policy: branch-tracking during development; release pinning to tags.\n   - Release process: tag child repos; update parent to tags; tag parent; changelog aggregation.\n8) Tooling, hooks, and configs\n   - Git configs: submodule.recurse=true; status.submodulesummary=1.\n   - Pre-commit hook to block committing with dirty submodules.\n   - Pre-push hook to block pushing parent with unpushed child branches.\n   - Optional helper scripts (see Phase 3) referenced here.\n9) Troubleshooting and FAQ\n   - Detached HEAD inside submodules and how to switch branch.\n   - Submodule pointer appears modified unexpectedly (explain pointers).\n   - Updating .gitmodules vs .git/config; use git submodule sync.\n   - Dealing with nested submodules.\n   - Cleaning local state: git submodule foreach --recursive git clean -fdx.\n\nPhase 3: Optional supporting assets (if in scope)\n1) scripts/submodules/add_child.sh\n   - Inputs: repo URL, path, branch; configures .gitmodules, shallow if requested.\n2) scripts/submodules/update_all.sh\n   - Loops over submodules; runs git submodule update --remote --merge; opens a branch and commits pointer bumps.\n3) scripts/submodules/check_clean.sh\n   - Exits non-zero if any submodule has uncommitted changes or unpushed commits.\n4) .githooks/\n   - pre-commit: call check_clean.sh; warn if submodule pointer changed without .gitmodules update when needed.\n   - pre-push: prevent pushes if submodules point to non-origin commits.\n5) Documentation references to these scripts and how to install hooks (core.hooksPath).\n\nPhase 4: Validation and review\n1) Dry-run the documented commands in a throwaway clone to confirm accuracy across macOS/Linux.\n2) Validate CI snippets by triggering a minimal workflow (or using local runner like act where possible).\n3) Obtain review from at least two maintainers focused on Git hygiene and CI.\n\nPhase 5: Adoption\n1) Link the new doc from README and CONTRIBUTING.\n2) Announce in team channels; include a short Quickstart snippet.\n3) Open a tracking issue for future improvements (automation, Renovate support for submodules, etc.).\n\nAcceptance criteria\n- A single, comprehensive document exists at docs/child-projects/submodules.md covering: overview, quickstart, daily workflows (add/update/develop/coordinated), maintenance (remove/rename/migrate), CI/CD, auth, versioning, tooling, troubleshooting.\n- All command sequences are tested and correct.\n- CI examples provided for at least GitHub Actions and GitLab CI.\n- Clear policies on branch tracking vs tagged releases and on authentication are documented.\n- Reviewed and approved by 2 maintainers.\n\nOut of scope / Risks\n- Deep automation of cross-repo PRs (may be proposed later).\n- Migration tooling beyond documented steps (use subtree/filter-repo as guidance).\n- Risk: Private submodules in CI require proper key management\u2014documented mitigations provided.\n\nEstimated effort\n- Authoring and testing: 1\u20132 days.\n- Review and polish: 0.5 day.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.3",
      "status": "-",
      "title": "Helper scripts for submodule initialization and management",
      "description": "Add simple, portable shell scripts to streamline submodule initialization, syncing, and adding new child projects under the projects/ folder.",
      "plan": "Feature: Helper scripts for submodule initialization and management (ID: 3.3)\n\nObjective\n- Provide a robust, cross-platform (macOS/Linux/Windows) set of helper scripts to initialize, update, inspect, add, remove, and otherwise manage Git submodules used for the child projects structure.\n- Make routine operations one-liners, standardize .gitmodules configuration, enforce reproducibility, and integrate with CI.\n\nDeliverables\n- Scripts (Bash + PowerShell) under scripts/submodules/:\n  - bootstrap.(sh|ps1): Initialize and sync all submodules recursively.\n  - update.(sh|ps1): Update submodules to recorded commits (default) or fetch latest from remotes with flags.\n  - status.(sh|ps1): Summarize submodule state; optional JSON output for CI.\n  - add.(sh|ps1): Add a new submodule with consistent configuration.\n  - remove.(sh|ps1): Cleanly remove a submodule and its metadata.\n  - foreach.(sh|ps1): Safe wrapper to run commands across submodules with filtering.\n  - switch-branches.(sh|ps1): Align all submodules to a branch, tag, or recorded commit.\n  - lock.(sh|ps1): Generate/verify a lock manifest with submodule commit SHAs and metadata.\n  - ci-prepare.(sh|ps1): Helper for CI environments to ensure submodules are ready (with caching support hints).\n- Configuration and documentation:\n  - scripts/submodules/README.md: Usage guide, examples, troubleshooting.\n  - scripts/submodules/.env.example: Optional environment variable overrides.\n  - Update repository root README or CONTRIBUTING to reference scripts.\n  - Optional .githooks installation script to prevent committing dirty submodules.\n- CI examples:\n  - .github/workflows/submodules.yml snippet or docs for integrating bootstrap + status checks.\n\nAssumptions and Constraints\n- Git version >= 2.28 recommended (for consistent behavior); scripts will detect and warn for older versions.\n- No external dependencies beyond Git, Bash (Unix), and PowerShell (Windows). JSON output will be handcrafted to avoid jq dependency.\n- Support nested submodules via --recursive where appropriate.\n\nDirectory Structure\n- scripts/submodules/\n  - bootstrap.sh, bootstrap.ps1\n  - update.sh, update.ps1\n  - status.sh, status.ps1\n  - add.sh, add.ps1\n  - remove.sh, remove.ps1\n  - foreach.sh, foreach.ps1\n  - switch-branches.sh, switch-branches.ps1\n  - lock.sh, lock.ps1\n  - ci-prepare.sh, ci-prepare.ps1\n  - README.md\n  - .env.example\n\nConventions & Defaults\n- .gitmodules standardization:\n  - submodule.<name>.update = checkout (avoid rebase/merge surprises)\n  - submodule.<name>.fetchRecurseSubmodules = true\n  - submodule.<name>.shallow = true for CI speed (configurable flag)\n- Default behavior:\n  - bootstrap: sync and checkout recorded commits, recursive, jobs = number of cores (configurable via SUBMODULE_JOBS)\n  - update: no remote fast-forward by default; optional --remote to move fast-forward to remote HEAD of tracked branch.\n  - status: display commit, branch (if any), HEAD detached/dirty, ahead/behind; exit non-zero if dirty unless --allow-dirty.\n  - lock: generates scripts/submodules/submodules.lock.json with path, name, commit, branch, remote URL, and timestamp; verify checks against working tree and recorded commits.\n- Environment variables to control behavior:\n  - SUBMODULE_JOBS (default: min(8, nproc))\n  - SUBMODULE_REMOTE (true/false default false)\n  - SUBMODULE_SHALLOW (true/false default true)\n  - SUBMODULE_ASSUME_YES (for non-interactive remove/add)\n\nImplementation Steps\n1) Scaffolding\n- Create scripts/submodules/ directory and placeholder files for all scripts with shebangs, usage text, and set -euo pipefail (Bash). In PowerShell, use strict mode and proper error handling.\n- Add .env.example with documented variables.\n- Add README.md skeleton.\n\n2) bootstrap.(sh|ps1)\n- Behavior:\n  - Validate Git repo and .gitmodules existence; if missing, log and exit 0.\n  - git submodule sync --recursive\n  - Configure fetchRecurseSubmodules=true at repo level if not set.\n  - Determine jobs: $SUBMODULE_JOBS or cores.\n  - git submodule update --init --recursive --jobs N\n  - If SUBMODULE_SHALLOW=true, attempt shallow initialization:\n    - git -c submodule.<name>.shallow=true submodule update --init --depth 1 (note: depth 1 may not work for recorded commits; fallback without depth on failure)\n- Edge cases:\n  - If recorded commit is not reachable in shallow fetch, automatically retry without shallow.\n  - Handle nested submodules recursively.\n- Logging: clear start/end messages, durations.\n- Exit codes: non-zero on failure; zero on success.\n\n3) update.(sh|ps1)\n- Flags:\n  - --remote: update submodules to latest commit on their tracked branch (git submodule update --remote)\n  - --all: operate on all submodules (default); optional positional list to limit paths\n  - --recursive: propagate into nested submodules\n  - --jobs N: override parallelism\n  - --commit: after updates, create a single commit in superproject recording new gitlinks (default true unless --no-commit)\n  - --no-commit: do not commit changes\n  - --message \"msg\": custom commit message\n- Implementation:\n  - Parse args; compute git submodule update args accordingly\n  - Ensure submodule branches are configured (submodule.<name>.branch). If missing but --remote provided, default to main/master detection or warn and skip.\n  - Run git submodule update [--remote] [--init] --recursive --jobs N [paths]\n  - Detect dirty submodules after update; show diff summary\n  - If --commit, run git add .gitmodules and submodule paths with changes, then create a single commit with message like \"chore(submodules): update\"\n- Edge cases: detached HEAD inside submodules when using --remote; consider switching to branch temporarily if needed.\n\n4) status.(sh|ps1)\n- Flags: --json for machine output; --summary (default); --recursive; --fail-on-dirty (default true)\n- Implementation:\n  - For each submodule (git config --file .gitmodules --get-regexp path):\n    - Get recorded commit from superproject index (git ls-tree HEAD <path>)\n    - Get working commit (git -C <path> rev-parse HEAD)\n    - Check dirty state (git -C <path> status --porcelain)\n    - Determine branch (git -C <path> symbolic-ref --short -q HEAD), or note detached\n    - Ahead/behind vs remote (if branch set and upstream exists)\n  - Print human-readable table; for --json output a JSON array with objects {name,path,recordedCommit,headCommit,branch,detached,dirty,ahead,behind,remoteUrl}\n  - Exit non-zero if any dirty and --fail-on-dirty\n\n5) add.(sh|ps1)\n- Usage: add <url> <path> [--name <name>] [--branch <branch>] [--shallow]\n- Steps:\n  - Validate url and path (path within repo, not existing file)\n  - git submodule add [-b branch] --name name URL PATH\n  - Enforce .gitmodules conventions (update=checkout, fetchRecurseSubmodules=true, shallow=true if requested)\n  - git add .gitmodules PATH && git commit -m \"chore(submodules): add <name>\"\n- Edge: If branch not provided attempt to detect remote default branch.\n\n6) remove.(sh|ps1)\n- Usage: remove <path> [--yes]\n- Steps:\n  - Confirm removal (unless --yes or SUBMODULE_ASSUME_YES)\n  - git submodule deinit -f PATH\n  - git rm -f PATH (removes from index and working tree)\n  - Remove section from .gitmodules: git config -f .gitmodules --remove-section submodule.<name>\n  - git add .gitmodules && rm -rf .git/modules/<path> && git commit -m \"chore(submodules): remove <name>\"\n- Safety: Validate path is a configured submodule.\n\n7) foreach.(sh|ps1)\n- Usage: foreach [--recursive] [--filter name|path regex] -- <command>\n- Wrapper over git submodule foreach; add filtering by name/path via pre-selection of submodule list.\n\n8) switch-branches.(sh|ps1)\n- Usage:\n  - switch-branches --to-branch <branch>\n  - switch-branches --detach (reset all submodules to recorded commits)\n- Implementation:\n  - For each submodule:\n    - If --to-branch: fetch, check if branch exists; checkout or create tracking; pull --ff-only\n    - If --detach: git -C <path> checkout --detach <recordedCommit>\n  - Option --commit to record updated gitlinks in superproject\n- Edge: handle protected or diverged branches (warn and skip).\n\n9) lock.(sh|ps1)\n- Behavior:\n  - lock generate: Produce scripts/submodules/submodules.lock.json containing an array of objects for each submodule: name, path, commit, branch (if any), remoteUrl, timestamp, superprojectCommit.\n  - lock verify: Compare lockfile to working tree commits and remote URLs; fail if mismatched.\n- Flags: --verify, --generate (default), --output <file>\n\n10) ci-prepare.(sh|ps1)\n- Logic:\n  - If repo cloned with --recurse-submodules: run bootstrap to sync and ensure recorded commits\n  - Else: run bootstrap from scratch\n  - Print caching tips (e.g., cache .git/modules and submodule directories if feasible)\n\n11) Documentation (README.md)\n- Overview and rationale\n- Prerequisites and Git version notes\n- Quick start: scripts/submodules/bootstrap.sh; Windows PowerShell commands\n- Detailed usage for each script, with examples\n- CI integration example (GitHub Actions): checkout with submodules: recursive; run ci-prepare and status --json\n- Troubleshooting: detached HEAD, shallow fetch failures, mismatched URLs, Windows execution policy (Set-ExecutionPolicy RemoteSigned)\n\n12) Quality and Safety\n- Implement common helpers: colored output (optional), verbose mode (-v), and robust error handling.\n- Ensure scripts only operate within the current Git repo; guard against paths outside repo root.\n- Ensure idempotency of bootstrap and status.\n- Provide clear exit codes for CI usage.\n\n13) Acceptance Criteria\n- bootstrap initializes a fresh clone with nested submodules, handling shallow fallback automatically.\n- update --remote updates to latest for all submodules with a single superproject commit.\n- status outputs accurate table and valid JSON with --json; exits non-zero when dirty.\n- add and remove create appropriate commits and maintain .gitmodules consistency.\n- switch-branches switches all submodules to a target branch or detaches to recorded commit.\n- lock generate/verify works and detects mismatches.\n- All scripts work on macOS/Linux (Bash) and Windows (PowerShell) with identical semantics.\n\n14) Test Plan\n- Create a local test harness script that initializes a temporary repo with two nested submodules, commits, and branches.\n- Test scenarios:\n  - Fresh bootstrap with shallow=true; fallback on missing commit\n  - update --remote on submodules tracking main\n  - status dirty and clean cases; verify JSON parse\n  - add/remove round-trip; ensure .gitmodules cleaned\n  - switch-branches to branch and detach back to recorded commit\n  - lock generate and verify failure after manual change\n  - Windows PowerShell smoke test for all scripts\n\n15) Rollout\n- Implement Bash scripts first, mirror functionality in PowerShell with consistent flags.\n- Add docs and examples.\n- Wire into CI: add a workflow job invoking bootstrap and status --json; fail on dirty.\n- Announce usage guidance to the team and migrate any legacy submodule scripts to these new helpers.\n",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.4",
      "status": "-",
      "title": "First child project: Docker environment setup",
      "description": "Create a file at projects/docker/Dockerfile that sets up the environment for running the project in a Docker container. It should include installing dependencies, copying necessary files, handling .env for API keys, and setting the entrypoint for running the agent periodically. Create a file at projects/docker/RUNNING_DOCKER_README.md detailing the steps to build and run the project in Docker, including how to prepare .env, use the build script, and run the container periodically. Create a script projects/docker/build_docker.sh that clones the repository, checks for a prepared .env file with API keys, builds the Docker image using the Dockerfile, and provides instructions for running the container. Ensure the Dockerfile and build script handle a .env file for API keys, copying it into the container during build or mounting it at runtime to avoid exposing keys on the host. Configure the Docker setup so that the agent can run periodically inside the container without affecting the host machine, possibly using cron or a loop in the entrypoint script.",
      "plan": "Title: Docker environment setup (ID: 3.4)\n\nGoal\n- Provide a reproducible Docker environment to run the agent periodically without affecting the host.\n- Handle API keys via .env securely, supporting both runtime mounting and optional build-time inclusion using Docker BuildKit secrets.\n- Deliver three artifacts:\n  1) projects/docker/Dockerfile\n  2) projects/docker/RUNNING_DOCKER_README.md\n  3) projects/docker/build_docker.sh\n\nKey Assumptions\n- The project is a Python-based agent (default), but the run command may vary per project. We will expose a RUN_COMMAND environment variable to allow customization.\n- We will default to running the agent periodically using a simple loop in an entrypoint script. Optionally support cron via CRON_SCHEDULE.\n- We will not assume or modify application code files; the Docker setup should work if a proper RUN_COMMAND is provided.\n- We will not include .env in the image by default. The build script ensures the build context excludes .env unless explicitly requested.\n\nSecurity and .env Handling Strategy\n- Default (recommended): Provide the .env to the container at runtime via --env-file or a bind mount. The .env is not baked into the image.\n- Optional: Allow build-time secret injection using Docker BuildKit: --secret id=env,src=.env to write /app/.env during build (image will contain the env content afterward, clearly documented as less secure).\n- The build script clones the repository into a temp directory and ensures any .env in the repo is removed from the build context to prevent accidental inclusion.\n\nDeliverable 1: projects/docker/Dockerfile (detailed design)\n- Base image: python:3.11-slim\n- Install OS dependencies: bash, tzdata, ca-certificates, git, curl (for diagnostics), and optionally cron (for cron-based scheduling).\n- Create non-root user (agent) and set WORKDIR to /app.\n- Copy and install Python dependencies with cache-friendly layering:\n  - If requirements.txt exists: pip install -r requirements.txt.\n  - Else if pyproject.toml exists: pip install . (or pip install -e . if appropriate). For simplicity, attempt pip install . after copying pyproject/poetry.lock if present.\n  - If neither exists, skip dependency installation and rely on RUN_COMMAND installing deps (documented in README).\n- Copy the rest of the repository into /app.\n- .env handling during build (optional):\n  - Support BuildKit secret: RUN --mount=type=secret,id=env,dst=/run/secrets/.env sh -c 'cp /run/secrets/.env /app/.env' (only if secret provided).\n  - Also support an ARG COPY_DOTENV=true path (discouraged): if provided and a .env file is found in build context (should not be by default), copy it. This will be disabled by default and not recommended.\n- Create an entrypoint script inline via a heredoc that:\n  - Loads environment from /app/.env if present using: set -a; [ -f /app/.env ] && . /app/.env; set +a.\n  - Supports RUN_COMMAND env var (default: python -m agent if exists, else python main.py). Because project varies, we\u2019ll default to python main.py and document overriding via RUN_COMMAND.\n  - Supports periodic execution via either:\n    - Loop mode (default): read INTERVAL_MINUTES (default 30). while true; do run command; sleep; done.\n    - Cron mode: If CRON_SCHEDULE is set, generate a crontab that runs a wrapper script, start cron in foreground.\n  - Support RUN_ONCE=true to run the command once and exit.\n  - Log timestamps to stdout for observability.\n- ENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n- ENV defaults: INTERVAL_MINUTES=30, TZ=UTC.\n- Ensure correct permissions and non-root execution with USER agent.\n\nDeliverable 2: projects/docker/RUNNING_DOCKER_README.md (content outline)\n- Prerequisites:\n  - Docker installed and running.\n  - (Optional) Docker BuildKit enabled for build-time secret usage.\n- Prepare .env:\n  - Create a .env in your host project root with API keys (examples: OPENAI_API_KEY=..., ANTHROPIC_API_KEY=..., etc.). Mention not to commit .env.\n  - Security notes: prefer runtime --env-file or bind mount; avoid baking into image unless necessary.\n- Build the Docker image:\n  - Use the build script: ./projects/docker/build_docker.sh --image-tag myagent:latest\n  - Options:\n    - --repo-url <git_url> and --branch <branch> (if running outside a git repo or to target a specific branch).\n    - --copy-dotenv (discouraged): copy .env into image via BuildKit secret (requires DOCKER_BUILDKIT=1). Warn about security.\n- Run the container (loop mode):\n  - docker run --rm -it \\\n    --name agent \\\n    --env-file ./.env \\\n    -e RUN_COMMAND=\"python main.py\" \\\n    -e INTERVAL_MINUTES=15 \\\n    myagent:latest\n- Run once and exit:\n  - docker run --rm -it --env-file ./.env -e RUN_ONCE=true -e RUN_COMMAND=\"python main.py\" myagent:latest\n- Cron mode (optional):\n  - docker run --rm -d --env-file ./.env -e CRON_SCHEDULE=\"*/10 * * * *\" -e RUN_COMMAND=\"python main.py\" --name agent myagent:latest\n- Volumes/outputs:\n  - Example mounting a host data directory: -v $(pwd)/data:/app/data\n- Timezone:\n  - Set -e TZ=America/New_York if needed.\n- Verifying logs and troubleshooting tips.\n- Security considerations and cleaning up containers/images.\n\nDeliverable 3: projects/docker/build_docker.sh (detailed behavior)\n- Purpose: Build a clean Docker image by cloning the repository into a temp dir, ensuring .env is not included unintentionally, and optionally injecting .env via BuildKit secret.\n- Script behavior:\n  1) set -euo pipefail\n  2) Parse arguments:\n     - --image-tag (required or default: agent:latest)\n     - --repo-url (optional; default: infer from current git remote origin url; if absent and not in git repo, require it)\n     - --branch (optional; default: current branch or main)\n     - --copy-dotenv (flag; default false) When set, pass BuildKit secret to bake .env into image.\n     - --context-dir (optional) Use an existing checkout as context; otherwise clone temp.\n  3) Validate Docker availability.\n  4) Determine repo URL and branch:\n     - Try: git config --get remote.origin.url and git rev-parse --abbrev-ref HEAD\n     - Fall back to provided args.\n  5) Prepare build context directory:\n     - If --context-dir provided: use it; else create a temp dir and git clone --depth=1 --branch <branch> <repo-url> <tempdir>.\n     - Ensure no .env inside the context: remove if found.\n  6) Decide on BuildKit usage:\n     - If --copy-dotenv: require ./.env present in caller directory; export DOCKER_BUILDKIT=1; build with --secret id=env,src=.env and pass --build-arg COPY_DOTENV=true.\n     - Else: do not provide .env to build; instruct user to run with --env-file or mount.\n  7) Build the image:\n     - docker build \\\n       -t \"$IMAGE_TAG\" \\\n       -f \"$CONTEXT_DIR/projects/docker/Dockerfile\" \\\n       [--secret id=env,src=.env] \\\n       --build-arg BUILDKIT_INLINE_CACHE=1 \\\n       --build-arg COPY_DOTENV=${COPY_DOTENV:-false} \\\n       \"$CONTEXT_DIR\"\n  8) Print post-build instructions:\n     - Example docker run commands for loop mode, once-only, and cron mode, including how to use --env-file or mount .env.\n     - Remind about setting RUN_COMMAND and INTERVAL_MINUTES.\n  9) Cleanup: If temp clone was created, optionally remove or keep (with a flag like --keep-context).\n- The script should be POSIX-compliant bash and executable.\n\nEntrypoint Script Logic (embedded via heredoc in Dockerfile)\n- Path: /usr/local/bin/entrypoint.sh\n- Steps:\n  - set -euo pipefail\n  - set -a; [ -f /app/.env ] && . /app/.env; set +a\n  - Default RUN_COMMAND: if [ -f main.py ]; then RUN_COMMAND=\"python main.py\"; else RUN_COMMAND=\"python -c 'print(\\\"Please set RUN_COMMAND env var to your app entrypoint\\\")'\"; fi; allow override via env.\n  - If RUN_ONCE=true: execute RUN_COMMAND once and exit with its status.\n  - If CRON_SCHEDULE is set:\n    - Write a wrapper script /usr/local/bin/run_agent_once.sh that sources env and executes RUN_COMMAND, redirecting output to stdout (using logger or tee), then create a crontab for the agent user.\n    - Start cron in foreground (cron -f) to keep container alive.\n  - Else (loop mode): while true; do\n    - echo timestamp; eval \"$RUN_COMMAND\"; capture exit code; sleep ${INTERVAL_MINUTES:-30}m; done\n\nTesting Plan\n- Local test with a minimal Python project having main.py that prints a timestamp.\n- Verify:\n  - Image builds without .env in layers by default.\n  - Runtime with --env-file successfully loads env vars in entrypoint.\n  - RUN_ONCE works and exits with code from the command.\n  - Loop mode runs repeatedly at the configured interval.\n  - Cron mode runs per schedule and logs are visible via docker logs.\n  - Optional --copy-dotenv path bakes .env; confirm warnings are shown.\n\nAcceptance Criteria\n- Dockerfile builds successfully for a typical Python project and can run a configurable command periodically without host cron.\n- .env handling supports both runtime --env-file and optional BuildKit secret; by default .env is not part of the image.\n- build_docker.sh clones repo, avoids including .env in build context, builds image, and prints clear run instructions.\n- RUNNING_DOCKER_README.md provides end-to-end guidance including .env preparation, build, and run examples for loop and cron modes.\n- The solution runs as a non-root user and exposes basic configuration via env vars (RUN_COMMAND, INTERVAL_MINUTES, CRON_SCHEDULE, RUN_ONCE, TZ).",
      "context": [],
      "acceptance": []
    }
  ]
}