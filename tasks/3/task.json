{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work. The first project is `Docker`. We want to be able to run any project (including this + any child project) in a docker environment. It needs to be extremely easy to launch this - ideally a single function call to get it launched and then whatever function call needs to be called inside the running container. As a first example we should be able to launch this project in docker and call `run.py` to launch an agent exactly as defined in `LOCAL_SETUP.md`. There needs to be a step-by-step guide for this that exactly explains it.",
  "features": [
    {
      "id": "3.0",
      "status": "-",
      "title": "Create all the  missing features for this using `create_feature`",
      "description": "There is a folder called `projects` where all the child projects are stored. Each child project has its own repository and is linked to this one via git submodules. This project's `.gitignore` needs to be updated so it ignores the `projects` folder and all the files inside it.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/tasks/task_format.py",
        "docs/tasks/task_example.py",
        "docs/LOCAL_SETUP.md"
      ],
      "acceptance": [],
      "plan": "Goal: Ensure the main repo ignores the projects/ directory and its contents, while continuing to manage child projects as git submodules. Provide clear documentation and optional helper scripts for consistent submodule workflows.\n\nImplementation Plan:\n1) Audit current state\n   - Check .gitignore for existing rules affecting projects/.\n   - Identify any tracked files under projects/ that are not submodule gitlinks: git ls-files projects/.\n   - Confirm .gitmodules is present (if submodules already exist) and not ignored.\n\n2) Update .gitignore\n   - Add the rule at repo root: /projects/\n   - Add an explanatory comment above the rule:\n     # Ignore local child projects folder (managed as git submodules)\n     /projects/\n   - Ensure .gitmodules remains tracked (no rule should ignore it; only add !/.gitmodules if a very broad ignore exists).\n\n3) Remediation for tracked content (if needed)\n   - If any normal files in projects/ are tracked (not submodules), untrack them: git rm -r --cached projects/<offending-path> and commit, or convert them into submodules as appropriate.\n   - Do not remove submodule gitlinks. Validate submodules via: git ls-files --stage | grep 160000 to see gitlinks.\n\n4) Commit and validation\n   - Commit the .gitignore change with a clear message, e.g., \"chore(git): ignore projects/ folder used for submodules\".\n   - Local validation:\n     - Create a temporary file projects/_ignore_check.tmp and run git status; it should not appear.\n     - If existing submodules exist under projects/, verify they remain recognized: git submodule status shows entries and git status does not list untracked content from submodules.\n\n5) Documentation\n   - Add a dedicated doc (docs/submodules.md) explaining:\n     - What the projects/ folder is for and why it's ignored.\n     - How to clone and initialize submodules: git submodule update --init --recursive.\n     - How to add a new child project: git submodule add --name <name> <url> projects/<name>; commit .gitmodules and the gitlink.\n     - How to update a child project and record the new commit in the parent repo.\n     - How to remove a child project submodule safely.\n     - Common pitfalls and troubleshooting (e.g., detached HEAD, syncing URLs).\n   - Link this doc from README.md for discoverability.\n\n6) Helper scripts (optional but recommended)\n   - scripts/submodules-init.sh: Initialize and update submodules (set executable; include usage help). Commands: git submodule sync --recursive && git submodule update --init --recursive.\n   - scripts/submodule-add.sh: Adds a new submodule under projects/<name>, validates input, optionally sets branch, and commits .gitmodules + gitlink.\n   - scripts/submodules-sync.sh: Sync submodule URLs recursively.\n   - Document usage of these scripts in docs/submodules.md.\n\n7) CI/CD considerations (conditional)\n   - If CI exists, ensure steps that do not require submodules skip cloning/updating them to speed pipelines, or explicitly run submodule init/update when needed. Ensure any caches ignore projects/.\n\nAcceptance Criteria:\n- .gitignore at repo root includes /projects/ with an explanatory comment.\n- Creating a new file under projects/ does not show up in git status.\n- Existing submodules under projects/ still function; git submodule status shows expected entries.\n- docs/submodules.md exists and is linked from README.md with clear, actionable instructions.\n- Helper scripts (if included) exist, are executable, and their usage is documented."
    },
    {
      "id": "3.1",
      "status": "-",
      "title": "Update .gitignore to ignore projects/ directory and contents",
      "action": "Add .gitignore rules so the projects/ folder (which contains child projects as git submodules) and all files within it are ignored by the main repository, while ensuring submodule tracking via .gitmodules and gitlinks remains intact.",
      "plan": "Steps:\n1) Open the repository's root .gitignore file.\n2) Add the following comment and rule near the top:\n   # Ignore local child projects folder (managed as git submodules)\n   /projects/\n3) Ensure no existing rule inadvertently ignores .gitmodules; if a broad pattern does, append a negation rule: !/.gitmodules\n4) If any tracked non-submodule files exist under projects/:\n   - List them: git ls-files projects/\n   - Untrack as needed: git rm -r --cached projects/<path>\n   - Commit with an explanatory message.\n5) Commit the .gitignore change: chore(git): ignore projects/ folder used for submodules\n6) Validate locally:\n   - touch projects/_ignore_check.tmp && git status (should not show the file).\n   - If submodules exist, run git submodule status to confirm they are still recognized; ensure git status is clean regarding projects/.\nAcceptance Criteria:\n- .gitignore contains '/projects/' with a clear comment.\n- Adding a temporary file under projects/ does not appear in git status.\n- Existing submodules (if any) remain recognized and unaffected.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Document submodule workflow for child projects",
      "action": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "Steps:\n1) Create docs/submodules.md with the following sections:\n   - Overview: projects/ folder, submodules rationale, and why it's ignored in this repo.\n   - Prerequisites: git version, SSH keys or token if needed.\n   - Cloning & setup: git clone, git submodule update --init --recursive, and syncing submodule URLs.\n   - Adding a child project: git submodule add --name <name> <url> projects/<name>; commit .gitmodules and gitlink.\n   - Updating a child project: pull/checkout inside the submodule, commit in parent repo to record new SHA.\n   - Removing a child project: steps to deinit, remove from .gitmodules, and clean the path.\n   - Common pitfalls: detached HEAD, dirty submodule state, URL changes, shallow clones.\n   - Optional: Usage of helper scripts if present.\n2) Update README.md to add a link to docs/submodules.md and a brief summary.\n3) Validate that commands are accurate and tested locally.\nAcceptance Criteria:\n- docs/submodules.md exists and is comprehensive.\n- README.md links to the new doc and briefly explains the projects/ + submodule design.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.3",
      "status": "-",
      "title": "Helper scripts for submodule initialization and management",
      "action": "Add simple, portable shell scripts to streamline submodule initialization, syncing, and adding new child projects under the projects/ folder.",
      "plan": "Steps:\n1) Create scripts/submodules-init.sh with:\n   - set -euo pipefail\n   - Commands: git submodule sync --recursive && git submodule update --init --recursive\n   - Usage/help output when run with -h/--help.\n2) Create scripts/submodules-sync.sh with:\n   - set -euo pipefail\n   - Command: git submodule sync --recursive && git submodule update --remote --recursive (optional flag)\n   - Usage/help and warnings about updating to remote tips.\n3) Create scripts/submodule-add.sh with:\n   - set -euo pipefail\n   - Parameters: NAME, URL, optional BRANCH; path defaults to projects/${NAME}\n   - Validations: non-empty args, path not existing, projects/ present\n   - Command: git submodule add ${BRANCH:+-b $BRANCH} --name \"$NAME\" \"$URL\" \"projects/$NAME\" && git add .gitmodules \"projects/$NAME\" && git commit -m \"feat(submodule): add $NAME at projects/$NAME\"\n   - Print next steps for collaborators.\n4) Make all scripts executable: chmod +x scripts/*.sh\n5) Reference these scripts in docs/submodules.md with examples.\nAcceptance Criteria:\n- scripts/submodules-init.sh, scripts/submodules-sync.sh, and scripts/submodule-add.sh exist, are executable, and run successfully.\n- docs/submodules.md documents their usage.",
      "context": [],
      "acceptance": []
    }
  ]
}