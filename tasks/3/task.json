{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work. The first project is `Docker`. We want to be able to run any project (including this + any child project) in a docker environment. It needs to be extremely easy to launch this - ideally a single function call to get it launched and then whatever function call needs to be called inside the running container. As a first example we should be able to launch this project in docker and call `run.py` to launch an agent exactly as defined in `LOCAL_SETUP.md`. There needs to be a step-by-step guide for this that exactly explains it.",
  "features": [
    {
      "id": "3.0",
      "status": "-",
      "title": "Create all the  missing features for this using `create_feature`",
      "description": "There is a folder called `projects` where all the child projects are stored. Each child project has its own repository and is linked to this one via git submodules. This project's `.gitignore` needs to be updated so it ignores the `projects` folder and all the files inside it.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/tasks/task_format.py",
        "docs/tasks/task_example.py",
        "docs/LOCAL_SETUP.md"
      ],
      "acceptance": [],
      "plan": "Goal: Ensure the main repo ignores the projects/ directory and its contents, while continuing to manage child projects as git submodules. Provide clear documentation and optional helper scripts for consistent submodule workflows.\n\nImplementation Plan:\n1) Audit current state\n   - Check .gitignore for existing rules affecting projects/.\n   - Identify any tracked files under projects/ that are not submodule gitlinks: git ls-files projects/.\n   - Confirm .gitmodules is present (if submodules already exist) and not ignored.\n\n2) Update .gitignore\n   - Add the rule at repo root: /projects/\n   - Add an explanatory comment above the rule:\n     # Ignore local child projects folder (managed as git submodules)\n     /projects/\n   - Ensure .gitmodules remains tracked (no rule should ignore it; only add !/.gitmodules if a very broad ignore exists).\n\n3) Remediation for tracked content (if needed)\n   - If any normal files in projects/ are tracked (not submodules), untrack them: git rm -r --cached projects/<offending-path> and commit, or convert them into submodules as appropriate.\n   - Do not remove submodule gitlinks. Validate submodules via: git ls-files --stage | grep 160000 to see gitlinks.\n\n4) Commit and validation\n   - Commit the .gitignore change with a clear message, e.g., \"chore(git): ignore projects/ folder used for submodules\".\n   - Local validation:\n     - Create a temporary file projects/_ignore_check.tmp and run git status; it should not appear.\n     - If existing submodules exist under projects/, verify they remain recognized: git submodule status shows entries and git status does not list untracked content from submodules.\n\n5) Documentation\n   - Add a dedicated doc (docs/submodules.md) explaining:\n     - What the projects/ folder is for and why it's ignored.\n     - How to clone and initialize submodules: git submodule update --init --recursive.\n     - How to add a new child project: git submodule add --name <name> <url> projects/<name>; commit .gitmodules and the gitlink.\n     - How to update a child project and record the new commit in the parent repo.\n     - How to remove a child project submodule safely.\n     - Common pitfalls and troubleshooting (e.g., detached HEAD, syncing URLs).\n   - Link this doc from README.md for discoverability.\n\n6) Helper scripts (optional but recommended)\n   - scripts/submodules-init.sh: Initialize and update submodules (set executable; include usage help). Commands: git submodule sync --recursive && git submodule update --init --recursive.\n   - scripts/submodule-add.sh: Adds a new submodule under projects/<name>, validates input, optionally sets branch, and commits .gitmodules + gitlink.\n   - scripts/submodules-sync.sh: Sync submodule URLs recursively.\n   - Document usage of these scripts in docs/submodules.md.\n\n7) CI/CD considerations (conditional)\n   - If CI exists, ensure steps that do not require submodules skip cloning/updating them to speed pipelines, or explicitly run submodule init/update when needed. Ensure any caches ignore projects/.\n\nAcceptance Criteria:\n- .gitignore at repo root includes /projects/ with an explanatory comment.\n- Creating a new file under projects/ does not show up in git status.\n- Existing submodules under projects/ still function; git submodule status shows expected entries.\n- docs/submodules.md exists and is linked from README.md with clear, actionable instructions.\n- Helper scripts (if included) exist, are executable, and their usage is documented."
    },
    {
      "id": "3.1",
      "status": "-",
      "title": "Update .gitignore to ignore projects/ directory and contents",
      "action": "Add .gitignore rules so the projects/ folder (which contains child projects as git submodules) and all files within it are ignored by the main repository, while ensuring submodule tracking via .gitmodules and gitlinks remains intact.",
      "plan": "Implementation plan for feature 3.1: Update .gitignore to ignore projects/ directory and contents\n\n1) Preparation\n- Confirm the repository uses a top-level directory named \"projects\" for child projects.\n- Decide whether the repository must keep an empty projects/ directory tracked (e.g., via a .gitkeep). If not required, ignore everything. If required, add an exception for a single placeholder file.\n\n2) Update .gitignore\n- Locate the root .gitignore file. If it does not exist, create it at the repository root.\n- Open .gitignore and add a new section (avoid duplicating existing rules):\n  # Ignore child projects directory\n  /projects/\n- Notes:\n  - Use forward slashes; Git ignores are POSIX-style regardless of OS.\n  - The leading slash scopes the rule to the repository root so only the top-level projects/ is ignored.\n\n3) Optional: keep a placeholder tracked (only if needed)\n- If the team requires the directory to exist in the repo while ignoring its contents, add an exception rule under the above lines:\n  !/projects/.gitkeep\n- Do NOT add this exception unless we also intend to commit a projects/.gitkeep file in a separate task. This feature only adjusts .gitignore.\n\n4) Validate locally\n- Create a temporary file for verification: echo \"test\" > projects/_ignore_me.txt\n- Run: git status\n  - Expected: projects/_ignore_me.txt should not appear in the status output.\n- If an exception for .gitkeep was added in step 3, create an empty projects/.gitkeep and run: git add projects/.gitkeep\n  - Expected: .gitkeep is tracked while all other files under projects/ remain ignored.\n- Optionally run: git check-ignore -v projects/_ignore_me.txt to confirm the rule and source line.\n\n5) Edge cases and conflicts\n- Ensure there are no un-ignore rules (e.g., !/projects/*) elsewhere in .gitignore that would counteract this.\n- If prior rules existed for projects/, consolidate into a single clear rule to avoid confusion.\n\n6) Documentation\n- Update developer docs/README (in a separate docs task if necessary) to clarify that all child projects live under projects/ and are ignored by default.\n\n7) Acceptance criteria\n- .gitignore contains an entry that ignores the top-level projects/ directory and all its contents.\n- Creating files under projects/ does not show them in git status.\n- No unintended files outside projects/ are affected.\n\n8) Rollback plan\n- If needed, remove the /projects/ rule from .gitignore and commit the change.\n- Run git rm -r --cached projects/ to re-track the directory and its contents if previously ignored.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Document submodule workflow for child projects",
      "action": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "Feature: Document submodule workflow for child projects\n\nGoal\n- Provide a clear, authoritative guide for managing child projects as Git submodules in the parent repository, covering onboarding, daily operations, maintenance, CI/CD, auth, governance, versioning, and troubleshooting.\n\nAssumptions\n- Child projects live as Git submodules under a designated directory (e.g., children/ or projects/). Adjust names to actual repo conventions during authoring.\n- Git v2.31+ and SSH access (recommended) or HTTPS with PAT are available to developers and CI.\n\nScope\n- Documentation only (primary). Optionally include small helper scripts and hooks to standardize developer operations.\n\nPlan and Steps\n\nPhase 1: Align on conventions and prerequisites\n1) Confirm directory structure and naming: decide the canonical path for submodules (e.g., children/<child-name>/) and naming conventions.\n2) Define submodule configuration policy:\n   - Tracking branch default (e.g., main) via .gitmodules submodule.<path>.branch.\n   - Shallow checkouts (shallow = true) where appropriate.\n   - Prefer SSH URLs (recommended) and provide HTTPS alternative.\n   - Decide on nested submodules policy (allow/avoid).\n3) Define versioning policy:\n   - Pin to tags for releases; pin to branch heads for ongoing development.\n   - Tagging strategy and compatibility expectations.\n4) Define governance and ownership:\n   - How CODEOWNERS applies to submodule paths.\n   - Approval requirements when bumping submodule pointers.\n5) Document required tools and access:\n   - Git version; SSH keys or PAT; org permissions.\n\nDeliverable: A concise \u201cSubmodule policy\u201d section to include at the top of the document.\n\nPhase 2: Author primary documentation (docs/child-projects/submodules.md)\nStructure and content:\n1) Overview and scope\n   - Why submodules are used; pros/cons; when to use.\n   - Repo structure diagram (textual tree) showing parent and children.\n2) Quickstart (fresh clone)\n   - Commands: git clone, git submodule update --init --recursive, optional config: git config submodule.recurse true.\n   - Verifying status: git submodule status.\n3) Daily workflows\n   a) Add a new child project\n      - Command sequence:\n        - git submodule add -b <branch> <ssh-url> children/<name>\n        - git config -f .gitmodules submodule.children/<name>.branch <branch>\n        - Optional shallow: git config -f .gitmodules submodule.children/<name>.shallow true\n        - git add .gitmodules children/<name>\n        - git commit -m \"Add submodule: <name> at <branch>\"\n      - Notes: URL conventions; .gitmodules review; CODEOWNERS update.\n   b) Update a child to latest\n      - Quick path: git submodule update --remote --merge children/<name>\n      - Manual path: cd children/<name>; git fetch; git checkout <branch-or-tag>; cd -; git add children/<name>; git commit -m \"Bump <name> to <ref>\"\n      - Locking to a tag vs tracking a branch.\n   c) Work on a child repo (feature development)\n      - cd children/<name>; git switch -c feat/x; implement; push; open PR in child repo; merge there; then bump pointer in parent with a commit message referencing the child PR.\n   d) Coordinated multi-repo change\n      - Create matching branches in each child and the parent; open cross-referenced PRs; order of merges; then fast-forward parent pointers; include rollback strategy.\n   e) Verify and commit submodule pointer changes\n      - git status shows modified content at path; ensure no local dirty state in submodules; commit pointer updates.\n4) Maintenance workflows\n   a) Remove a submodule\n      - Commands:\n        - git submodule deinit -f children/<name>\n        - rm -rf .git/modules/children/<name>\n        - git rm -f children/<name>\n        - git commit -m \"Remove submodule <name>\"\n        - Verify .gitmodules updated; if needed remove leftover config sections: git config -f .git/config --remove-section submodule.children/<name> || true\n   b) Rename a submodule path\n      - git mv children/<old> children/<new>; update .gitmodules path entry; git submodule sync --recursive; git add .gitmodules; git commit.\n   c) Migrate an existing folder to a submodule (history preserved)\n      - Option A (subtree split):\n        - git subtree split -P children/<name> -b export/<name>\n        - Create new repo; push: git push <new-url> export/<name>:main\n        - Remove folder; add as submodule per step 3a.\n      - Option B (git filter-repo) with equivalent steps if allowed.\n5) CI/CD considerations\n   - GitHub Actions:\n     - Use actions/checkout@v4 with: submodules: recursive, fetch-depth: 0; set ssh-key or token for private submodules.\n     - Example:\n       - uses: actions/checkout@v4\n         with:\n           submodules: recursive\n           fetch-depth: 0\n           ssh-key: ${{ secrets.DEPLOY_KEY }}\n   - GitLab CI:\n     - before_script: git submodule sync --recursive && git submodule update --init --recursive\n     - Ensure GIT_SSH_COMMAND or CI_JOB_TOKEN auth setup.\n   - Caching strategies; pin to tags for release builds.\n6) Authentication for private submodules\n   - Recommended: SSH with org deploy keys or user keys; URL standardization using git config url.ssh://git@github.com/.insteadOf https://github.com/\n   - Alternative: HTTPS with fine-grained PAT; update Actions secrets and CI variable usage.\n7) Versioning and release management\n   - Policy: branch-tracking during development; release pinning to tags.\n   - Release process: tag child repos; update parent to tags; tag parent; changelog aggregation.\n8) Tooling, hooks, and configs\n   - Git configs: submodule.recurse=true; status.submodulesummary=1.\n   - Pre-commit hook to block committing with dirty submodules.\n   - Pre-push hook to block pushing parent with unpushed child branches.\n   - Optional helper scripts (see Phase 3) referenced here.\n9) Troubleshooting and FAQ\n   - Detached HEAD inside submodules and how to switch branch.\n   - Submodule pointer appears modified unexpectedly (explain pointers).\n   - Updating .gitmodules vs .git/config; use git submodule sync.\n   - Dealing with nested submodules.\n   - Cleaning local state: git submodule foreach --recursive git clean -fdx.\n\nPhase 3: Optional supporting assets (if in scope)\n1) scripts/submodules/add_child.sh\n   - Inputs: repo URL, path, branch; configures .gitmodules, shallow if requested.\n2) scripts/submodules/update_all.sh\n   - Loops over submodules; runs git submodule update --remote --merge; opens a branch and commits pointer bumps.\n3) scripts/submodules/check_clean.sh\n   - Exits non-zero if any submodule has uncommitted changes or unpushed commits.\n4) .githooks/\n   - pre-commit: call check_clean.sh; warn if submodule pointer changed without .gitmodules update when needed.\n   - pre-push: prevent pushes if submodules point to non-origin commits.\n5) Documentation references to these scripts and how to install hooks (core.hooksPath).\n\nPhase 4: Validation and review\n1) Dry-run the documented commands in a throwaway clone to confirm accuracy across macOS/Linux.\n2) Validate CI snippets by triggering a minimal workflow (or using local runner like act where possible).\n3) Obtain review from at least two maintainers focused on Git hygiene and CI.\n\nPhase 5: Adoption\n1) Link the new doc from README and CONTRIBUTING.\n2) Announce in team channels; include a short Quickstart snippet.\n3) Open a tracking issue for future improvements (automation, Renovate support for submodules, etc.).\n\nAcceptance criteria\n- A single, comprehensive document exists at docs/child-projects/submodules.md covering: overview, quickstart, daily workflows (add/update/develop/coordinated), maintenance (remove/rename/migrate), CI/CD, auth, versioning, tooling, troubleshooting.\n- All command sequences are tested and correct.\n- CI examples provided for at least GitHub Actions and GitLab CI.\n- Clear policies on branch tracking vs tagged releases and on authentication are documented.\n- Reviewed and approved by 2 maintainers.\n\nOut of scope / Risks\n- Deep automation of cross-repo PRs (may be proposed later).\n- Migration tooling beyond documented steps (use subtree/filter-repo as guidance).\n- Risk: Private submodules in CI require proper key management\u2014documented mitigations provided.\n\nEstimated effort\n- Authoring and testing: 1\u20132 days.\n- Review and polish: 0.5 day.",
      "context": [],
      "acceptance": []
    },
    {
      "id": "3.3",
      "status": "-",
      "title": "Helper scripts for submodule initialization and management",
      "action": "Add simple, portable shell scripts to streamline submodule initialization, syncing, and adding new child projects under the projects/ folder.",
      "plan": "Steps:\n1) Create scripts/submodules-init.sh with:\n   - set -euo pipefail\n   - Commands: git submodule sync --recursive && git submodule update --init --recursive\n   - Usage/help output when run with -h/--help.\n2) Create scripts/submodules-sync.sh with:\n   - set -euo pipefail\n   - Command: git submodule sync --recursive && git submodule update --remote --recursive (optional flag)\n   - Usage/help and warnings about updating to remote tips.\n3) Create scripts/submodule-add.sh with:\n   - set -euo pipefail\n   - Parameters: NAME, URL, optional BRANCH; path defaults to projects/${NAME}\n   - Validations: non-empty args, path not existing, projects/ present\n   - Command: git submodule add ${BRANCH:+-b $BRANCH} --name \"$NAME\" \"$URL\" \"projects/$NAME\" && git add .gitmodules \"projects/$NAME\" && git commit -m \"feat(submodule): add $NAME at projects/$NAME\"\n   - Print next steps for collaborators.\n4) Make all scripts executable: chmod +x scripts/*.sh\n5) Reference these scripts in docs/submodules.md with examples.\nAcceptance Criteria:\n- scripts/submodules-init.sh, scripts/submodules-sync.sh, and scripts/submodule-add.sh exist, are executable, and run successfully.\n- docs/submodules.md documents their usage.",
      "context": [],
      "acceptance": []
    }
  ]
}