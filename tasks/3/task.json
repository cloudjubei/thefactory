{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work.",
  "features": [
    {
      "id": "3.1",
      "status": "+",
      "title": "Script: Child projects structure generation and other various utils and helpers",
      "description": "The script generates the new child projects within the projects/ folder. It sets up a folder with an initial empty task so that it's possible to start planning the feature out. It also creates a git repository for it and links it via submodules to this project.",
      "plan": "1. Create or update the file scripts/child_project_utils.py with the shebang #!/usr/bin/env python3.\n2. Import required modules: argparse, os, subprocess, sys, from pathlib import Path.\n3. Define constants: DEFAULT_PROJECTS_PATH = 'projects', GITIGNORE_TEMPLATE (standard ignores), INITIAL_TASK_CONTENT (placeholder for initial task).\n4. Implement run_command function to execute shell commands, handle dry_run, and capture output/errors.\n5. Implement check_git_installed to verify git availability.\n6. In main, set up argparse with arguments: project_name (positional), --description (default 'A new child project.'), --repo-url (optional, but recommend making it required for production), --path (default 'projects'), --dry-run (flag).\n7. Add epilog to argparse with usage examples.\n8. Parse args; if not dry_run, check git.\n9. Compute project_path = Path(args.path) / args.project_name; error if exists.\n10. Define subpaths: tasks_dir, readme_path, gitignore_path, initial_task_path = tasks_dir / '000_initial_task.md'.\n11. If not dry_run, create directories and write files: README.md with project name and description, .gitignore from template, initial task from content.\n12. To properly set up submodule: if repo_url, run git submodule add -b main args.repo_url str(project_path) to clone empty repo (assume remote exists and is empty).\n13. Change directory to project_path.\n14. Create files and directories as in step 11 (since cloned empty).\n15. Run git add . \n16. Run git commit -m 'Initial commit from scaffolding script'.\n17. Run git push origin main.\n18. Change directory back to root.\n19. Run git add str(project_path) to update submodule pointer.\n20. Print message reminding to commit: git commit -m 'Add submodule projects/{args.project_name} with initial structure'.\n21. For local-only (no repo_url), use git submodule add ./relative_path relative_path, but note limitations in script comments.\n22. Handle errors, add notes about creating remote repo beforehand.\n23. For other utils: Add functions or separate scripts in scripts/ for updating submodules (e.g., update_all_submodules.py using git submodule update --remote --recursive), switching branches, removing submodules, as per PROJECTS_GUIDE.md.\n24. Update docs/PROJECTS_GUIDE.md if needed to reference the new script features.\n25. Ensure the script is executable (chmod +x) and test it with dry-run.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md",
        "scripts/child_project_utils.py",
        "docs/tasks/task_format.py",
        "docs/tasks/task_example.json"
      ],
      "acceptance": [
        "1. A CLI entry point exists to generate a child project `scripts/child_project_utils.py` that accepts at minimum: project_name (required), and optionally: description, repo_url (for remote origin), and path (defaulting to projects/).",
        "2. When invoked with a new project_name, the script creates a directory at projects/{project_name}. If the directory already exists, the script exits with a non-zero code and a clear error message without modifying existing contents.",
        "3. Inside the new child project, the script creates a minimal structure including: a README.md with the provided name/description, a tasks/ directory containing an initial task file (e.g., tasks/000_initial_task.md) with placeholder content, and a .gitignore with typical Python/node/temp artifacts (or inherits from a template if present).",
        "4. The script initializes a new git repository inside the child project directory (independent repo): `.git/` exists, `git status` is clean after initial commit, and the initial commit includes the scaffolded files.",
        "5. If a repo_url is provided, it is set as the `origin` remote in the child project's git repo.",
        "6. The root repository is updated to include the new child project as a git submodule at projects/{project_name}. The .gitmodules file is updated accordingly with the correct path and URL (if repo_url provided) or with a local path URL if not provided.",
        "7. Re-running the script for the same project_name is idempotent and fails fast with a clear message without altering existing submodule configuration.",
        "8. The script provides a `--dry-run` option that prints planned actions (paths to create, git commands to run) and makes no filesystem or git changes when used.",
        "9. The script returns exit code 0 on success and non-zero on failure; errors include actionable messages (e.g., missing git, invalid name, non-empty target path).",
        "10. A help/usage message is available via `-h/--help` describing arguments, options, examples, and behavior."
      ]
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Document script guide",
      "description": "Create clear documentation detailing how the script is used (step-by-step guide to get everything working ASAP) and how to use git submodules in the main project (also as short and concise step-by-step guide for this as possible).",
      "plan": "",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md",
        "scripts/child_project_utils.py"
      ],
      "acceptance": [],
      "dependencies": [
        "3.1"
      ]
    }
  ]
}