{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work.",
  "features": [
    {
      "id": "3.1",
      "status": "-",
      "title": "Document submodule workflow for child projects",
      "description": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "1. **File Creation**: Create a new markdown file named `submodule_workflow.md` inside a `documentation/` directory.\n2. **Introduction Section**: Write an introduction explaining the purpose of using git submodules for child projects within the `projects/` directory. Briefly outline what the document will cover.\n3. **Cloning & Initialization Section**: Detail the process for a new user cloning the main repository. Cover both `git clone --recurse-submodules` and the separate `git submodule update --init --recursive` commands, explaining when to use each.\n4. **Adding a Submodule Section**: Provide step-by-step instructions on how to add a new child project as a submodule using `git submodule add <repository_url> projects/<project_name>`.\n5. **Updating Submodules Section**: Document how to pull the latest changes into the submodules. Explain `git submodule update --remote` and the manual `cd projects/<project_name>` followed by `git pull`. Describe how to commit the updated submodule reference in the parent repository.\n6. **Developing in a Submodule Section**: Outline the workflow for making changes within a submodule. This includes navigating into the directory, creating a branch, committing, pushing the submodule changes, and then committing the new reference in the parent repository.\n7. **Removing a Submodule Section**: Provide the complete, multi-step process for safely removing a submodule, including `git submodule deinit`, `git rm`, editing `.gitmodules`, and cleaning the `.git` directory.\n8. **Common Pitfalls & Best Practices Section**: Create a dedicated section to address common issues. This must include:\n    - Explanation of the 'detached HEAD' state and how to resolve it.\n    - The importance of committing the submodule pointer change in the parent repository.\n    - The correct order of operations: push submodule changes *before* pushing parent repository changes.\n9. **Review and Finalize**: Read through the entire document to check for clarity, technical accuracy, and formatting. Add code blocks for all commands to ensure they are easy to copy and use.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md"
      ],
      "acceptance": [
        "A Markdown document exists at docs/PROJECTS_GUIDE.md describing how child projects under the projects/ directory are managed as git submodules.",
        "docs/FILE_ORGANISATION.md is updated to reference/include the new docs/PROJECTS_GUIDE.md file.",
        "docs/PROJECTS_GUIDE.md contains an Overview section explaining the purpose of the projects/ folder and that each child project is a git submodule.",
        "docs/PROJECTS_GUIDE.md provides instructions for cloning the repository with submodules using: git clone --recurse-submodules; and for initializing submodules in an existing clone using git submodule init and git submodule update (including the combined git submodule update --init --recursive variant).",
        "docs/PROJECTS_GUIDE.md explains how to add a new child project as a submodule under projects/<name> using git submodule add -b <branch> <url> projects/<name>, and explicitly mentions committing both .gitmodules and the submodule pointer update in the superproject.",
        "docs/PROJECTS_GUIDE.md explains how to update submodules to newer commits using either git submodule update --remote [--recursive] or by entering the submodule and pulling, then committing the pointer bump in the superproject. It includes examples of git submodule foreach for bulk operations.",
        "docs/PROJECTS_GUIDE.md explains how to switch the tracked branch for a submodule via git config -f .gitmodules submodule.projects/<name>.branch <branch> and notes committing .gitmodules.",
        "docs/PROJECTS_GUIDE.md explains how to remove a child project submodule, including the steps: git submodule deinit -f projects/<name>, git rm -f projects/<name>, and removing the .git/modules/projects/<name> directory, and notes that .gitmodules is updated and committed accordingly.",
        "docs/PROJECTS_GUIDE.md contains a Common pitfalls section that explicitly mentions: detached HEAD in submodules; uncommitted changes in submodules; mixing SSH and HTTPS URLs; forgetting to commit .gitmodules; not committing the submodule pointer update; needing git submodule sync when URLs change; and ensuring CI uses --init --recursive.",
        "docs/PROJECTS_GUIDE.md contains a CI/CD notes section showing recommended commands to fetch submodules in automation: git clone --recurse-submodules and/or git submodule update --init --recursive.",
        "docs/PROJECTS_GUIDE.md includes a Troubleshooting section mentioning git submodule sync (preferably with --recursive) and git submodule status usage.",
        "docs/PROJECTS_GUIDE.md includes a Quick reference or cheat sheet that summarizes the most common commands for clone/init, add, update, switch branch, remove, and status.",
        "All examples use paths under projects/ and illustrate projects/<name> for submodules, and the document makes clear that changes inside a submodule should be committed within the submodule and then the superproject pointer updated and committed.",
        "docs/PROJECTS_GUIDE.md references and demonstrates the following commands at least once: git clone --recurse-submodules; git submodule init; git submodule update; git submodule update --init --recursive; git submodule add -b; git submodule update --remote; git submodule foreach; git submodule status; git config -f .gitmodules submodule.projects/<name>.branch <branch>; git submodule deinit -f; git rm -f projects/<name>; rm -rf .git/modules/projects/<name>; git submodule sync.",
        "docs/PROJECTS_GUIDE.md discusses authentication schemes (SSH vs HTTPS) and warns about mixing them across submodules and CI."
      ]
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Script: Child projects structure generation and other various utils and helpers",
      "description": "The script generates the new child projects within the projects/ folder. It sets up a folder with an initial empty task so that it's possible to start planning the feature out. It also creates a git repository for it and links it via submodules to this project.",
      "plan": "Title: Script to generate child projects structure with git submodules linkage\n\nSummary\n- Build a Python CLI tool to create new child projects under projects/.\n- The tool initializes a standalone git repository inside the child folder and adds it to the parent as a git submodule.\n- Provide supporting utilities for filesystem, git operations, logging, validation, templating, and repository index management.\n- Ensure idempotency, dry-run capability, cross-platform compatibility, and tests.\n\nAssumptions and Non-goals\n- Assumes git is installed and available on PATH.\n- Remote repo creation is optional; the script supports both local-path and remote submodule targets.\n- No third-party Python dependencies; use standard library only.\n- Language/tool-agnostic child projects; only minimal structure is created unless extended later.\n\nCLI Specification\n- Entry point: tools/new_child_project.py\n- Usage examples:\n  - python tools/new_child_project.py --name \"API Gateway\" --id 7 --description \"Gateway for services\"\n  - python tools/new_child_project.py --name \"Notifications\" --id 12 --remote \"git@github.com:org/notifications.git\" --private\n  - python tools/new_child_project.py --name \"Data Layer\" --id 3 --dry-run --verbose\n- Arguments:\n  - --name (str, required): Human-readable project name.\n  - --id (int, required): Unique numeric identifier for the child project.\n  - --description (str, optional): Project description.\n  - --slug (str, optional): Override the auto-generated slug. Defaults to slugified name.\n  - --remote (str, optional): Git remote URL for the child project repo. If omitted, a local-path submodule is used.\n  - --visibility (enum: public|private, optional): For metadata only; no API calls.\n  - --author-name, --author-email (optional): For initial commit config if needed.\n  - --force (flag): Overwrite existing directory if exists (careful; will refuse if not empty unless confirmed).\n  - --dry-run (flag): Print actions without making changes.\n  - --verbose (flag): More logs.\n  - --no-submodule (flag): Scaffold project but do not add as submodule.\n  - --no-init-task (flag): Skip creation of the initial empty task.\n\nGenerated Child Project Structure (projects/<slug>/)\n- README.md: Title, description, setup, links back to parent.\n- .gitignore: Generic patterns (node/python/editor/OS artifacts minimal set).\n- LICENSE: Optional copy or reference to parent license if exists.\n- .gitattributes: Text normalization.\n- project.meta.json: Metadata (id, name, slug, description, visibility, created_at, parent_repo, parent_path).\n- tasks/\n  - 000-initial/\n    - feature.yaml: Empty/seed feature with title \"Initial planning\".\n    - plan.md: Placeholder for planning notes.\n- docs/\n  - overview.md: Optional with skeleton content.\n- scripts/: Placeholder directory with README for scripts.\n\nParent Repository Updates\n- Add as submodule under projects/<slug> (git submodule add [remote or local path] projects/<slug>). If remote not provided, use local path to the child folder; later the user can set a remote.\n- Update .gitmodules automatically if submodule added.\n- Update or create a registry file: projects/index.json tracking child projects metadata.\n- Optionally update a Projects section in README.md or docs/projects.md to include a link (configurable, default enabled if file exists and contains a marker comment).\n\nImplementation Plan\n1) Project scaffolding setup\n- Create tools/new_child_project.py as CLI entry.\n- Add a shebang and ensure Windows compatibility by relying on python interpreter invocation.\n\n2) Utilities package (tools/utils/)\n- fs.py: Filesystem helpers\n  - ensure_dir(path), write_file(path, content), read_json/write_json, safe_copy, atomic_write, exists, is_empty_dir, prompt_confirm (for overwrite), path_join wrapper.\n- git.py: Git operation wrappers using subprocess\n  - run_git(args, cwd=None), ensure_git_installed(), init_repo(path), initial_commit(path, message, author), add_all_commit(path, message), add_submodule(parent_repo, remote_or_path, subdir, name=None), set_remote(path, name, url), is_git_repo(path), get_current_branch(path), update_submodules(parent_repo), commit_parent_update(parent_repo, message), status helpers.\n- logger.py: Simple leveled logger (info/warn/error/debug) honoring --verbose.\n- validation.py: Validate name, id uniqueness (by checking projects/index.json), slug uniqueness (folder existence), id numeric positive, no invalid characters.\n- slug.py: Slugify name to lowercase kebab-case; protect reserved names; ensure length within limits.\n- template.py: Simple string.Template-based rendering; keep templates as Python string constants.\n- index.py: Load/save projects/index.json; find-next-id utility (not required but helpful), append entry, check conflicts.\n- readme.py: Helper to insert links under a marker in README.md or docs/projects.md.\n- env.py: Resolve repo root, detect OS, check required tools, path normalization.\n\n3) Templating content\n- README_TEMPLATE: Includes name, description, path, back-link to parent repo, basic commands.\n- GITIGNORE_TEMPLATE: Minimal common ignores.\n- GITATTRIBUTES_TEMPLATE: text=auto eol=lf.\n- LICENSE handling: If parent LICENSE exists, copy; else skip.\n- META_TEMPLATE (JSON dict assembled by code): id, name, slug, description, visibility, created_at ISO8601, parent_repo remote (if detectable), parent_path.\n- TASK_FEATURE_YAML_TEMPLATE: Seed YAML with title, id \"0\", description \"Initial planning\".\n- TASK_PLAN_MD_TEMPLATE: Section headings with TODOs.\n- SCRIPTS_README_TEMPLATE: Brief note.\n\n4) CLI flow\n- Parse arguments; compute slug (or validate given slug).\n- Determine absolute paths for parent repo root and child path projects/<slug>.\n- Validate uniqueness: id not in projects/index.json; slug directory does not exist (unless --force); .gitmodules does not already define submodule at that path unless --force.\n- If --dry-run: print all steps and exit 0.\n- Create directory structure under projects/<slug>.\n- Generate files from templates (README.md, .gitignore, .gitattributes, project.meta.json, tasks/000-initial/* unless --no-init-task, docs/overview.md, scripts/README.md). If parent LICENSE exists and visible, copy.\n- Initialize a git repository in child folder: git init; create initial commit with all files.\n- If --remote provided: set remote origin; optionally branch main; push not performed by default (out of scope) but can print next steps.\n- In parent repo, add as submodule unless --no-submodule:\n  - If remote provided: git submodule add <remote> projects/<slug>.\n  - Else: git submodule add ../projects/<slug> projects/<slug> (local path). Use absolute or relative path carefully; prefer relative path from parent root to child path.\n  - Commit submodule addition in parent repo with message \"Add submodule: <slug> (#<id>)\".\n- Update projects/index.json with the new project metadata and save. If file doesn't exist, create with schema: { \"projects\": [ ... ] }.\n- Optionally update README.md or docs/projects.md:\n  - If README contains a marker comment <!-- PROJECTS-LIST:START --> ... <!-- PROJECTS-LIST:END -->, inject a bullet link: - [<name>](projects/<slug>/) \u2014 <description>.\n- Print success summary and next steps (e.g., set remote, push, open task plan file).\n\n5) Idempotency and safety\n- If target folder exists and not empty: if --force, confirm overwrite; else abort.\n- If submodule path already in .gitmodules: abort unless --force, then remove existing submodule properly (git submodule deinit, rm, rm .git/modules/<path>) before re-adding.\n- Index JSON update should be atomic: write to temp then move.\n\n6) Cross-platform considerations\n- Use os.path operations; avoid POSIX-only commands.\n- Quote arguments passed to git via subprocess list invocation (no shell=True).\n- Normalize line endings where applicable.\n\n7) Error handling and logging\n- Graceful messages if git missing or commands fail; include stderr in verbose mode.\n- Return non-zero exit codes on failure.\n- Consistent logging style.\n\n8) Tests\n- Place under tests/test_new_child_project.py.\n- Use tempfile.TemporaryDirectory for isolated repos.\n- Mock subprocess calls minimally or perform real git calls within temp dirs if git available.\n- Test cases:\n  - Creates structure and files.\n  - Adds submodule entry in parent repo and .gitmodules is updated.\n  - Index file updates with correct metadata.\n  - Dry-run produces no filesystem changes.\n  - Duplicate id or slug is rejected.\n  - --force overwrites existing structure safely.\n  - --no-submodule skips submodule step.\n  - --no-init-task skips task folder.\n\n9) Documentation\n- Add docs/tools/new_child_project.md with usage, examples, expected outputs, and troubleshooting.\n- Add contribution note for extending templates and utilities.\n\n10) Acceptance Criteria\n- Running the tool with minimal arguments creates a new folder under projects/<slug> with the specified structure, initializes a git repo, commits files, and adds it as a submodule to the parent repo.\n- projects/index.json contains the new project metadata and remains a valid JSON file after multiple additions.\n- The operation is idempotent with clear behavior for conflicts and supports --dry-run.\n- Unit tests cover core flows and pass locally.\n\n11) Implementation Steps Checklist\n- [ ] Create tools/utils/ modules: fs.py, git.py, logger.py, slug.py, template.py, validation.py, index.py, readme.py, env.py.\n- [ ] Implement templates as constants in template.py.\n- [ ] Implement CLI in tools/new_child_project.py using argparse, wiring all utilities.\n- [ ] Implement index.json schema and update logic.\n- [ ] Implement README/projects list injection with markers.\n- [ ] Add tests under tests/.\n- [ ] Add docs/tools/new_child_project.md and update root README with marker if not present.\n- [ ] Manual test in a feature branch to ensure submodules flow works (local path and remote URL).\n- [ ] Finalize with example command outputs and ensure cross-platform run.\n",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md",
        "scripts/child_project_utils.py"
      ],
      "acceptance": [
        "A CLI entry point exists to generate a child project `scripts.child_project_utils` that accepts at minimum: project_name (required), and optionally: description, repo_url (for remote origin), and path (defaulting to projects/).",
        "When invoked with a new project_name, the script creates a directory at projects/{project_name}. If the directory already exists, the script exits with a non-zero code and a clear error message without modifying existing contents.",
        "Inside the new child project, the script creates a minimal structure including: a README.md with the provided name/description, a tasks/ directory containing an initial task file (e.g., tasks/000_initial_task.md) with placeholder content, and a .gitignore with typical Python/node/temp artifacts (or inherits from a template if present).",
        "The script initializes a new git repository inside the child project directory (independent repo): `.git/` exists, `git status` is clean after initial commit, and the initial commit includes the scaffolded files.",
        "If a repo_url is provided, it is set as the `origin` remote in the child project's git repo.",
        "The root repository is updated to include the new child project as a git submodule at projects/{project_name}. The .gitmodules file is updated accordingly with the correct path and URL (if repo_url provided) or with a local path URL if not provided.",
        "Re-running the script for the same project_name is idempotent and fails fast with a clear message without altering existing submodule configuration.",
        "The script provides a `--dry-run` option that prints planned actions (paths to create, git commands to run) and makes no filesystem or git changes when used.",
        "The script returns exit code 0 on success and non-zero on failure; errors include actionable messages (e.g., missing git, invalid name, non-empty target path).",
        "A help/usage message is available via `-h/--help` describing arguments, options, examples, and behavior."
      ]
    }
  ]
}