{
  "id": 3,
  "status": "-",
  "title": "New child projects structure",
  "description": "Create a new structure for child projects that stems from this project. This will be done by creating a new repository for each child project. Each child project is linked backed to this projct via git-submodules so that all the child projects are automatically updated whenever this project updates. This project drives the child projects and then the child projects can also be cloned independently if needed and will drive their own implementation work.",
  "features": [
    {
      "id": "3.1",
      "status": "+",
      "title": "Document submodule workflow for child projects",
      "description": "Create clear documentation detailing how the projects/ folder is used with git submodules, including cloning, initialization, adding, updating, and removing child projects, plus common pitfalls.",
      "plan": "Feature: Document submodule workflow for child projects\n\nGoal\n- Provide a clear, authoritative guide for managing child projects as Git submodules in the parent repository, covering onboarding, daily operations, maintenance, CI/CD, auth, governance, versioning, and troubleshooting.\n\nAssumptions\n- Child projects live as Git submodules under the designated directory `projects/`. Adjust names to actual repo conventions during authoring.\n- Git v2.31+ and SSH access (recommended) or HTTPS with PAT are available to developers and CI.\n\nScope\n- Documentation only (primary). Optionally include small helper scripts and hooks to standardize developer operations.\n\nPlan and Steps\n\nPhase 1: Align on conventions and prerequisites\n1) Confirm directory structure and naming: decide the canonical path for submodules (e.g., children/<child-name>/) and naming conventions.\n2) Define submodule configuration policy:\n   - Tracking branch default (e.g., main) via .gitmodules submodule.<path>.branch.\n   - Shallow checkouts (shallow = true) where appropriate.\n   - Prefer SSH URLs (recommended) and provide HTTPS alternative.\n   - Decide on nested submodules policy (allow/avoid).\n3) Define versioning policy:\n   - Pin to tags for releases; pin to branch heads for ongoing development.\n   - Tagging strategy and compatibility expectations.\n4) Define governance and ownership:\n   - How CODEOWNERS applies to submodule paths.\n   - Approval requirements when bumping submodule pointers.\n5) Document required tools and access:\n   - Git version; SSH keys or PAT; org permissions.\n\nDeliverable: A concise \u201cSubmodule policy\u201d section to include at the top of the document.\n\nPhase 2: Author primary documentation (docs/child-projects/submodules.md)\nStructure and content:\n1) Overview and scope\n   - Why submodules are used; pros/cons; when to use.\n   - Repo structure diagram (textual tree) showing parent and children.\n2) Quickstart (fresh clone)\n   - Commands: git clone, git submodule update --init --recursive, optional config: git config submodule.recurse true.\n   - Verifying status: git submodule status.\n3) Daily workflows\n   a) Add a new child project\n      - Command sequence:\n        - git submodule add -b <branch> <ssh-url> children/<name>\n        - git config -f .gitmodules submodule.children/<name>.branch <branch>\n        - Optional shallow: git config -f .gitmodules submodule.children/<name>.shallow true\n        - git add .gitmodules children/<name>\n        - git commit -m \"Add submodule: <name> at <branch>\"\n      - Notes: URL conventions; .gitmodules review; CODEOWNERS update.\n   b) Update a child to latest\n      - Quick path: git submodule update --remote --merge children/<name>\n      - Manual path: cd children/<name>; git fetch; git checkout <branch-or-tag>; cd -; git add children/<name>; git commit -m \"Bump <name> to <ref>\"\n      - Locking to a tag vs tracking a branch.\n   c) Work on a child repo (feature development)\n      - cd children/<name>; git switch -c feat/x; implement; push; open PR in child repo; merge there; then bump pointer in parent with a commit message referencing the child PR.\n   d) Coordinated multi-repo change\n      - Create matching branches in each child and the parent; open cross-referenced PRs; order of merges; then fast-forward parent pointers; include rollback strategy.\n   e) Verify and commit submodule pointer changes\n      - git status shows modified content at path; ensure no local dirty state in submodules; commit pointer updates.\n4) Maintenance workflows\n   a) Remove a submodule\n      - Commands:\n        - git submodule deinit -f children/<name>\n        - rm -rf .git/modules/children/<name>\n        - git rm -f children/<name>\n        - git commit -m \"Remove submodule <name>\"\n        - Verify .gitmodules updated; if needed remove leftover config sections: git config -f .git/config --remove-section submodule.children/<name> || true\n   b) Rename a submodule path\n      - git mv children/<old> children/<new>; update .gitmodules path entry; git submodule sync --recursive; git add .gitmodules; git commit.\n   c) Migrate an existing folder to a submodule (history preserved)\n      - Option A (subtree split):\n        - git subtree split -P children/<name> -b export/<name>\n        - Create new repo; push: git push <new-url> export/<name>:main\n        - Remove folder; add as submodule per step 3a.\n      - Option B (git filter-repo) with equivalent steps if allowed.\n5) CI/CD considerations\n   - GitHub Actions:\n     - Use actions/checkout@v4 with: submodules: recursive, fetch-depth: 0; set ssh-key or token for private submodules.\n     - Example:\n       - uses: actions/checkout@v4\n         with:\n           submodules: recursive\n           fetch-depth: 0\n           ssh-key: ${{ secrets.DEPLOY_KEY }}\n   - GitLab CI:\n     - before_script: git submodule sync --recursive && git submodule update --init --recursive\n     - Ensure GIT_SSH_COMMAND or CI_JOB_TOKEN auth setup.\n   - Caching strategies; pin to tags for release builds.\n6) Authentication for private submodules\n   - Recommended: SSH with org deploy keys or user keys; URL standardization using git config url.ssh://git@github.com/.insteadOf https://github.com/\n   - Alternative: HTTPS with fine-grained PAT; update Actions secrets and CI variable usage.\n7) Versioning and release management\n   - Policy: branch-tracking during development; release pinning to tags.\n   - Release process: tag child repos; update parent to tags; tag parent; changelog aggregation.\n8) Tooling, hooks, and configs\n   - Git configs: submodule.recurse=true; status.submodulesummary=1.\n   - Pre-commit hook to block committing with dirty submodules.\n   - Pre-push hook to block pushing parent with unpushed child branches.\n   - Optional helper scripts (see Phase 3) referenced here.\n9) Troubleshooting and FAQ\n   - Detached HEAD inside submodules and how to switch branch.\n   - Submodule pointer appears modified unexpectedly (explain pointers).\n   - Updating .gitmodules vs .git/config; use git submodule sync.\n   - Dealing with nested submodules.\n   - Cleaning local state: git submodule foreach --recursive git clean -fdx.\n\nPhase 3: Optional supporting assets (if in scope)\n1) scripts/submodules/add_child.sh\n   - Inputs: repo URL, path, branch; configures .gitmodules, shallow if requested.\n2) scripts/submodules/update_all.sh\n   - Loops over submodules; runs git submodule update --remote --merge; opens a branch and commits pointer bumps.\n3) scripts/submodules/check_clean.sh\n   - Exits non-zero if any submodule has uncommitted changes or unpushed commits.\n4) .githooks/\n   - pre-commit: call check_clean.sh; warn if submodule pointer changed without .gitmodules update when needed.\n   - pre-push: prevent pushes if submodules point to non-origin commits.\n5) Documentation references to these scripts and how to install hooks (core.hooksPath).\n\nPhase 4: Validation and review\n1) Dry-run the documented commands in a throwaway clone to confirm accuracy across macOS/Linux.\n2) Validate CI snippets by triggering a minimal workflow (or using local runner like act where possible).\n3) Obtain review from at least two maintainers focused on Git hygiene and CI.\n\nPhase 5: Adoption\n1) Link the new doc from README and CONTRIBUTING.\n2) Announce in team channels; include a short Quickstart snippet.\n3) Open a tracking issue for future improvements (automation, Renovate support for submodules, etc.).\n\nAcceptance criteria\n- A single, comprehensive document exists at docs/child-projects/submodules.md covering: overview, quickstart, daily workflows (add/update/develop/coordinated), maintenance (remove/rename/migrate), CI/CD, auth, versioning, tooling, troubleshooting.\n- All command sequences are tested and correct.\n- CI examples provided for at least GitHub Actions and GitLab CI.\n- Clear policies on branch tracking vs tagged releases and on authentication are documented.\n- Reviewed and approved by 2 maintainers.\n\nOut of scope / Risks\n- Deep automation of cross-repo PRs (may be proposed later).\n- Migration tooling beyond documented steps (use subtree/filter-repo as guidance).\n- Risk: Private submodules in CI require proper key management\u2014documented mitigations provided.\n\nEstimated effort\n- Authoring and testing: 1\u20132 days.\n- Review and polish: 0.5 day.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md"
      ],
      "acceptance": [
        "A Markdown document exists at docs/PROJECTS_GUIDE.md describing how child projects under the projects/ directory are managed as git submodules.",
        "docs/FILE_ORGANISATION.md is updated to reference/include the new docs/PROJECTS_GUIDE.md file.",
        "docs/PROJECTS_GUIDE.md contains an Overview section explaining the purpose of the projects/ folder and that each child project is a git submodule.",
        "docs/PROJECTS_GUIDE.md provides instructions for cloning the repository with submodules using: git clone --recurse-submodules; and for initializing submodules in an existing clone using git submodule init and git submodule update (including the combined git submodule update --init --recursive variant).",
        "docs/PROJECTS_GUIDE.md explains how to add a new child project as a submodule under projects/<name> using git submodule add -b <branch> <url> projects/<name>, and explicitly mentions committing both .gitmodules and the submodule pointer update in the superproject.",
        "docs/PROJECTS_GUIDE.md explains how to update submodules to newer commits using either git submodule update --remote [--recursive] or by entering the submodule and pulling, then committing the pointer bump in the superproject. It includes examples of git submodule foreach for bulk operations.",
        "docs/PROJECTS_GUIDE.md explains how to switch the tracked branch for a submodule via git config -f .gitmodules submodule.projects/<name>.branch <branch> and notes committing .gitmodules.",
        "docs/PROJECTS_GUIDE.md explains how to remove a child project submodule, including the steps: git submodule deinit -f projects/<name>, git rm -f projects/<name>, and removing the .git/modules/projects/<name> directory, and notes that .gitmodules is updated and committed accordingly.",
        "docs/PROJECTS_GUIDE.md contains a Common pitfalls section that explicitly mentions: detached HEAD in submodules; uncommitted changes in submodules; mixing SSH and HTTPS URLs; forgetting to commit .gitmodules; not committing the submodule pointer update; needing git submodule sync when URLs change; and ensuring CI uses --init --recursive.",
        "docs/PROJECTS_GUIDE.md contains a CI/CD notes section showing recommended commands to fetch submodules in automation: git clone --recurse-submodules and/or git submodule update --init --recursive.",
        "docs/PROJECTS_GUIDE.md includes a Troubleshooting section mentioning git submodule sync (preferably with --recursive) and git submodule status usage.",
        "docs/PROJECTS_GUIDE.md includes a Quick reference or cheat sheet that summarizes the most common commands for clone/init, add, update, switch branch, remove, and status.",
        "All examples use paths under projects/ and illustrate projects/<name> for submodules, and the document makes clear that changes inside a submodule should be committed within the submodule and then the superproject pointer updated and committed.",
        "docs/PROJECTS_GUIDE.md references and demonstrates the following commands at least once: git clone --recurse-submodules; git submodule init; git submodule update; git submodule update --init --recursive; git submodule add -b; git submodule update --remote; git submodule foreach; git submodule status; git config -f .gitmodules submodule.projects/<name>.branch <branch>; git submodule deinit -f; git rm -f projects/<name>; rm -rf .git/modules/projects/<name>; git submodule sync.",
        "docs/PROJECTS_GUIDE.md discusses authentication schemes (SSH vs HTTPS) and warns about mixing them across submodules and CI."
      ]
    },
    {
      "id": "3.2",
      "status": "-",
      "title": "Script: Child projects structure generation and other various utils and helpers",
      "description": "The script generates the new child projects within the projects/ folder. It sets up a folder with an initial empty task so that it's possible to start planning the feature out. It also creates a git repository for it and links it via submodules to this project.",
      "plan": "Create a script scripts/child_project_utils.py that holds all the relevant logic. The script includes the possibility to start an agent on the task within the child project structure.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/PROJECTS_GUIDE.md",
        "scripts/child_project_utils.py"
     ],
      "acceptance": []
    }
  ]
}