{
  "id": 4,
  "status": "-",
  "title": "Running in docker",
  "description": "Create a workflow to running the project in docker, i.e. isolated environment.",
  "features": [
    {
      "id": "4.1",
      "status": "-",
      "title": "Create Dockerfile for the project",
      "description": "Create a file at docs/docker/Dockerfile that sets up the environment for running the project in a Docker container. It should include installing dependencies, copying necessary files, handling .env for API keys, and setting the entrypoint for running the agent periodically.",
      "context": [
        "requirements.txt",
        ".env.example",
        "scripts/run_local_agent.py"
      ],
      "plan": "Step 1: Ensure the directory docs/docker exists; if not, create it.\nStep 2: Create a new file named Dockerfile inside docs/docker.\nStep 3: Choose a base image. Use FROM python:3.10-slim as the base, assuming the project is Python-based. If the project requires a different version or base, adjust accordingly.\nStep 4: Set the working directory with WORKDIR /app.\nStep 5: Install system dependencies if needed (e.g., RUN apt-get update && apt-get install -y cron for periodic running if using cron).\nStep 6: Copy requirements.txt (assuming it exists at project root) with COPY requirements.txt . and install dependencies with RUN pip install --no-cache-dir -r requirements.txt.\nStep 7: Copy the necessary project files with COPY . . (excluding sensitive files via .dockerignore if needed).\nStep 8: Handle .env: Do not copy actual .env into the image for security. Instead, COPY .env.example .env.example if it exists, and add a comment in Dockerfile noting that API keys should be passed at runtime using docker run --env-file .env or -e flags.\nStep 9: For periodic running, create an entrypoint script (e.g., entrypoint.sh) that runs the agent (assuming main.py or similar) in a loop with sleep (e.g., while true; do python main.py; sleep 3600; done) for hourly runs. Alternatively, set up cron: ADD crontab /etc/cron.d/agent-cron, RUN chmod 0644 /etc/cron.d/agent-cron && crontab /etc/cron.d/agent-cron, and set CMD ['cron', '-f']. Choose the loop method for simplicity unless cron is required.\nStep 10: Set the entrypoint with ENTRYPOINT ['./entrypoint.sh'] or appropriate command.\nStep 11: Add any necessary EXPOSE for ports if the agent serves something, and VOLUME if persistent data is needed.\nStep 12: Test the Dockerfile by building and running the container locally, ensuring dependencies install, .env is handled via runtime, and the agent runs periodically."
    },
    {
      "id": "4.2",
      "status": "-",
      "title": "Create README for running in Docker",
      "description": "Create a file at docs/docker/RUNNING_DOCKER_README.md detailing the steps to build and run the project in Docker, including how to prepare .env, use the build script, and run the container periodically.",
      "context": [
        "docs/LOCAL_SETUP.md",
        "docs/FILE_ORGANISATION.md",
        "scripts/run_local_agent.py"
      ]
    },
    {
      "id": "4.3",
      "status": "-",
      "title": "Create build script for Docker",
      "description": "Create a script (e.g., scripts/build_docker.sh) that clones the repository, checks for a prepared .env file with API keys, builds the Docker image using the Dockerfile, and provides instructions for running the container.",
      "context": [
        "docs/FILE_ORGANISATION.md",
        "docs/docker/Dockerfile",
        ".env.example",
        "docs/docker/RUNNING_DOCKER_README.md",
        "docs/LOCAL_SETUP.md",
        "scripts/run_local_agent.py"
      ]
    },
    {
      "id": "4.4",
      "status": "-",
      "title": "Handle API keys via .env in Docker setup",
      "description": "Ensure the Dockerfile and build script handle a .env file for API keys, copying it into the container during build or mounting it at runtime to avoid exposing keys on the host.",
      "context": [
        "docs/LOCAL_SETUP.md",
        "requirements.txt",
        "scripts/run_local_agent.py"
      ]
    },
    {
      "id": "4.5",
      "status": "-",
      "title": "Ensure container isolation for periodic agent runs",
      "description": "Configure the Docker setup so that the agent can run periodically inside the container without affecting the host machine, possibly using cron or a loop in the entrypoint script.",
      "context": [
        "Dockerfile",
        "entrypoint.sh",
        "scripts/run_local_agent.py"
      ]
    },
    {
      "id": "4.6",
      "status": "-",
      "title": "Integrate git workflow for feature branches in agent runs",
      "description": "Modify the agent execution logic to create a feature branch named features/{task_id} at the start of each task and push all code changes to it, ensuring this works within the Docker container.",
      "context": [
        "scripts/run_local_agent.py",
        "scripts/git_manager.py",
        "scripts/task_utils.py",
        "docs/LOCAL_SETUP.md",
        "Dockerfile"
      ]
    }
  ]
}