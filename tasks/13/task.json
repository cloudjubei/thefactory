{
  "id": 13,
  "status": "-",
  "title": "JSON-based tasks format",
  "action": "Define and implement a new JSON-based format for tasks to replace `tasks/TASKS.md`. This involves defining the schema, creating necessary tooling for interaction, migrating existing tasks, and finally deprecating the old format.",
  "plan": "This task migrates the project from a Markdown-based task management system (`TASKS.md`, `plan.md`) to a structured, directory-based JSON format (`tasks/{id}/task.json`). This plan adds detailed implementation notes to each remaining feature to guide the Developer persona through the final migration and cleanup steps.",
  "acceptance": [
    {
      "phase": "Phase 1: Specification & Definition",
      "criteria": [
        "`docs/tasks/task_format.py` exists. It defines the new task structure using concrete Python data types (e.g., `TypedDict`) for `Task`, `Feature`, and related objects, ensuring clear validation and serialization paths.",
        "`docs/tasks/task_example.json` exists, demonstrating a complete task in the new format.",
        "`docs/TASK_FORMAT.md` is moved to `docs/tasks/TASKS_GUIDANCE.md` and updated to remove content now covered by the JSON schema, focusing only on authoring guidance.",
        "`docs/tasks/TASKS_MIGRATION_GUIDE.md` exists, detailing the step-by-step migration plan, backward compatibility strategy, tooling requirements, and rollback plan."
      ]
    },
    {
      "phase": "Phase 2: Tooling & Integration",
      "criteria": [
        "A tool `scripts/tools/task_utils.py` is created with functions to reliably read, create, and update tasks/features in the new JSON format. This will replace direct file I/O for task manipulation.",
        "The Orchestrator (`run_local_agent.py`) is updated to use this new tooling and support a dual-read mode (reading from both `tasks/{id}/task.json` and `tasks/TASKS.md`) during the transition period."
      ]
    },
    {
      "phase": "Phase 3: Migration & Validation",
      "criteria": [
        "All existing tasks and their associated plans and tests are migrated to the new file structure: `tasks/{id}/task.json`, `tasks/{id}/plan.md`, `tasks/{id}/tests/test_{feature_id}.py`",
        "All tests must pass after migration to confirm correctness."
      ]
    },
    {
      "phase": "Phase 4: Cleanup",
      "criteria": [
        "The dual-read mode in the orchestrator is removed, making the JSON format the sole source of truth.",
        "`tasks/TASKS.md` is removed from the repository."
      ]
    }
  ],
  "features": [
    {
      "id": "13.1",
      "status": "+",
      "title": "Define Task Schema in Python",
      "action": "Create `docs/tasks/task_format.py` to define the new task structure using Python's `TypedDict` or similar data classes. This will serve as the canonical schema for tasks, features, and related objects.",
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python types for `Task`, `Feature`, and other relevant data structures.",
        "The types cover all fields currently used in `TASKS.md` and `plan.md` files."
      ],
      "output": "`docs/tasks/task_format.py`"
    },
    {
      "id": "13.2",
      "status": "+",
      "title": "Create Example JSON Task File",
      "action": "Create `docs/tasks/task_example.json` that demonstrates a complete task in the new format, adhering to the schema defined in `task_format.py`.",
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The JSON is valid and conforms to the structure defined in `docs/tasks/task_format.py`."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`docs/tasks/task_example.json`"
    },
    {
      "id": "13.3",
      "status": "-",
      "title": "Update Task Authoring Guidance",
      "action": "Move `docs/TASK_FORMAT.md` to `docs/tasks/TASKS_GUIDANCE.md` and update its content to align with the new JSON format, removing schema definitions now covered by `task_format.py` and focusing on authoring best practices.",
      "acceptance": [
        "`docs/tasks/TASKS_GUIDANCE.md` exists.",
        "The content of the new guidance file is updated to reflect the JSON-based workflow.",
        "`docs/TASK_FORMAT.md` is removed.",
        "`docs/FEATURE_FORMAT.md` is removed."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`docs/tasks/TASKS_GUIDANCE.md`"
    },
    {
      "id": "13.4",
      "status": "-",
      "title": "Create Task Utility Tooling",
      "action": "Create a new tool module `scripts/tools/task_utils.py` with functions to reliably read, create, and update tasks in the new JSON format. This will abstract file I/O for task manipulation.",
      "acceptance": [
        "`scripts/tools/task_utils.py` exists.",
        "it uses docs/tasks/task_format.py directly to reference the interfaces",
        "It contains functions like `get_task(task_id)`, `update_task(task_id, task_data)`, `create_task(...), update_task_status(tasK_id, feature_id?, status)",
        "It contains the function ask_agent_question() which should replace completely `tools/ask_question.py` - this edits the tasks/features `agent_question` field",
        "The script has all functions that enable an agent to interact with tasks and features in a controlled way - i.e. no direct text editing outside these functions.",
        "Functions are well-documented and include error handling."
      ],
      "dependencies": [
        "13.1", "13.2"
      ],
      "output": "`scripts/tools/task_utils.py`"
    },
    {
      "id": "13.5",
      "status": "-",
      "title": "Integrate Tooling into Orchestrator",
      "action": "Update the orchestrator (`run_local_agent.py`) to use `task_utils.py` for task operations.",
      "acceptance": [
        "`run_local_agent.py` is updated to import and use `task_utils.py`.",
        "The orchestrator can correctly parse task information from the new JSON file structure."
      ],
      "dependencies": [
        "13.4"
      ],
      "output": "Modified `scripts/run_local_agent.py`"
    },
    {
      "id": "13.6",
      "status": "-",
      "title": "The plan field should be updated",
      "action": "The plan field for both tasks and features needs to be in a LLM friendly style and Markdown format.",
      "acceptance": [
        "each task and feature has a plan field filled in",
        "each plan field is in Markdown format",
        "each plan field is in a LLM friendly style, meaning it should be clear, concise, and structured for easy understanding by an AI agent - they should see the plan and be able to go step by step through it"
      ],
      "dependencies": [
        "13.5"
      ],
      "plan": ""
    },
    {
      "id": "13.7",
      "status": "-",
      "title": "Cleanup",
      "action": "Handle any leftover missing functionality",
      "acceptance": [
        "all tasks that are complete have their status set to `+`",
        "all tasks folders only have the tests folder and a `task.json` file",
        "any other feature in this task that was about cleanup or deprecation is removed",
        "any other feature that no longer applied should be refined or removed"
      ],
      "dependencies": [
        "13.6"
      ]
    },
    {
      "id": "13.8",
      "status": "-",
      "title": "Migrate to task 1",
      "action": "Task 1 is the task that defines all information surrounding tasks, thus it is the one that should have all the features and definitions that are currently described here",
      "acceptance": [
        "Migrate into task 1, so it has all relevant information",
        "This task becomes superfluous but it remains as documentation"
      ],
      "dependencies": [
        "13.7"
      ]
     }
  ]
}