{
  "id": 13,
  "status": "-",
  "title": "JSON-based tasks format",
  "action": "Define and implement a new JSON-based format for tasks to replace `tasks/TASKS.md`. This involves defining the schema, creating necessary tooling for interaction, migrating existing tasks, and finally deprecating the old format.",
  "features": [
    {
      "id": "13.1",
      "status": "+",
      "title": "Define Task Schema in Python",
      "action": "Create `docs/tasks/task_format.py` to define the new task structure using Python's `TypedDict` or similar data classes. This will serve as the canonical schema for tasks, features, and related objects.",
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python types for `Task`, `Feature`, and other relevant data structures.",
        "The types cover all fields currently used in `TASKS.md` and `plan.md` files."
      ],
      "output": "`docs/tasks/task_format.py`"
    },
    {
      "id": "13.2",
      "status": "+",
      "title": "Create Example JSON Task File",
      "action": "Create `docs/tasks/task_example.json` that demonstrates a complete task in the new format, adhering to the schema defined in `task_format.py`.",
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The JSON is valid and conforms to the structure defined in `docs/tasks/task_format.py`."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`docs/tasks/task_example.json`"
    },
    {
      "id": "13.3",
      "status": "+",
      "title": "Create Task Utility Tooling",
      "action": "Create a new tool module `scripts/tools/task_utils.py` with functions to reliably read, create, and update tasks in the new JSON format. This will abstract file I/O for task manipulation.",
      "acceptance": [
        "`scripts/tools/task_utils.py` exists.",
        "it uses docs/tasks/task_format.py directly to reference the interfaces",
        "It contains the function `get_task(task_id: int) -> Task` returning a given task",
        "It contains the function `update_task(task_id: int, task_data: Task) -> Task` updating a given task",
        "It contains the function `create_task(task_data: Task) -> Task` creating a new task file in the system",
        "It contains the function `update_task_status(task_id: int, status: Status) -> Task` updating a task status",
        "It contains the function `update_feature_status(task_id: int, feature_id: int, status: Status) -> Feature` updating a feature status",
        "It contains the function `ask_agent_question(task_id: int, feature_id: int?, question: str) -> Task` editing the task's/feature's `agent_question` field. This function should replace completely `tools/ask_question.py`"
      ],
      "dependencies": [
        "13.1",
        "13.2"
      ]
    },
    {
      "id": "13.4",
      "status": "-",
      "title": "Update Task Authoring Guidance",
      "action": "update `docs/tasks/TASKS_GUIDANCE.md`  to align with the new JSON format, removing schema definitions now covered by `task_format.py` and focusing on authoring best practices.",
      "acceptance": [
        "`docs/tasks/TASKS_GUIDANCE.md` exists.",
        "the document references the `task_format.py` for schema definitions.",
        "the document references the task_utils.py` for task manipulation.",
        "the document references the `task_example.json` as an example of a task in the new format.",
        "The content of the new guidance file is updated to reflect the JSON-based workflow."
      ],
      "dependencies": [
        "13.3"
      ]
    },
    {
      "id": "13.5",
      "status": "-",
      "title": "Integrate Tooling into Orchestrator",
      "action": "Update the orchestrator (`run_local_agent.py`) to use `task_utils.py` for task operations.",
      "acceptance": [
        "`run_local_agent.py` is updated to import and use `task_utils.py`.",
        "The orchestrator can correctly parse task information from the new JSON file structure."
      ],
      "dependencies": [
        "13.4"
      ],
      "output": "Modified `scripts/run_local_agent.py`"
    },
    {
      "id": "13.6",
      "status": "-",
      "title": "The plan field should be updated",
      "action": "The plan field for both tasks and features needs to be in a LLM friendly style and Markdown format.",
      "acceptance": [
        "each task and feature has a plan field filled in",
        "each plan field is in Markdown format",
        "each plan field is in a LLM friendly style, meaning it should be clear, concise, and structured for easy understanding by an AI agent - they should see the plan and be able to go step by step through it"
      ],
      "dependencies": [
        "13.5"
      ],
      "plan": ""
    },
    {
      "id": "13.7",
      "status": "-",
      "title": "Cleanup",
      "action": "Handle any leftover missing functionality",
      "acceptance": [
        "all tasks that are complete have their status set to `+`",
        "all tasks folders only have the tests folder and a `task.json` file",
        "any other feature in this task that was about cleanup or deprecation is removed",
        "any other feature that no longer applied should be refined or removed"
      ],
      "dependencies": [
        "13.6"
      ]
    },
    {
      "id": "13.8",
      "status": "-",
      "title": "Migrate to task 1",
      "action": "Task 1 is the task that defines all information surrounding tasks, thus it is the one that should have all the features and definitions that are currently described here",
      "acceptance": [
        "Migrate into task 1, so it has all relevant information",
        "This task becomes superfluous but it remains as documentation"
      ],
      "dependencies": [
        "13.7"
      ]
    }
  ]
}
