{
  "id": 13,
  "status": "-",
  "title": "JSON-based tasks format",
  "action": "Define and implement a new JSON-based format for tasks to replace `tasks/TASKS.md`. This involves defining the schema, creating necessary tooling for interaction, migrating existing tasks, and finally deprecating the old format.",
  "plan": "This task migrates the project from a Markdown-based task management system (`TASKS.md`, `plan.md`) to a structured, directory-based JSON format (`tasks/{id}/task.json`). This plan adds detailed implementation notes to each remaining feature to guide the Developer persona through the final migration and cleanup steps.",
  "acceptance": [
    {
      "phase": "Phase 1: Specification & Definition",
      "criteria": [
        "`docs/tasks/task_format.py` exists. It defines the new task structure using concrete Python data types (e.g., `TypedDict`) for `Task`, `Feature`, and related objects, ensuring clear validation and serialization paths.",
        "`docs/tasks/task_example.json` exists, demonstrating a complete task in the new format.",
        "`docs/TASK_FORMAT.md` is moved to `docs/tasks/TASKS_GUIDANCE.md` and updated to remove content now covered by the JSON schema, focusing only on authoring guidance.",
        "`docs/tasks/TASKS_MIGRATION_GUIDE.md` exists, detailing the step-by-step migration plan, backward compatibility strategy, tooling requirements, and rollback plan."
      ]
    },
    {
      "phase": "Phase 2: Tooling & Integration",
      "criteria": [
        "A tool `scripts/tools/task_utils.py` is created with functions to reliably read, create, and update tasks/features in the new JSON format. This will replace direct file I/O for task manipulation.",
        "The Orchestrator (`run_local_agent.py`) is updated to use this new tooling and support a dual-read mode (reading from both `tasks/{id}/task.json` and `tasks/TASKS.md`) during the transition period."
      ]
    },
    {
      "phase": "Phase 3: Migration & Validation",
      "criteria": [
        "All existing tasks and their associated plans and tests are migrated to the new file structure: `tasks/{id}/task.json`, `tasks/{id}/plan.md`, `tasks/{id}/tests/test_{feature_id}.py`",
        "All tests must pass after migration to confirm correctness."
      ]
    },
    {
      "phase": "Phase 4: Cleanup",
      "criteria": [
        "The dual-read mode in the orchestrator is removed, making the JSON format the sole source of truth.",
        "`tasks/TASKS.md` is removed from the repository."
      ]
    }
  ],
  "features": [
    {
      "id": "13.1",
      "status": "+",
      "title": "Define Task Schema in Python",
      "action": "Create `docs/tasks/task_format.py` to define the new task structure using Python's `TypedDict` or similar data classes. This will serve as the canonical schema for tasks, features, and related objects.",
      "acceptance": [
        "`docs/tasks/task_format.py` exists.",
        "The file defines Python types for `Task`, `Feature`, and other relevant data structures.",
        "The types cover all fields currently used in `TASKS.md` and `plan.md` files."
      ],
      "output": "`docs/tasks/task_format.py`"
    },
    {
      "id": "13.2",
      "status": "+",
      "title": "Create Example JSON Task File",
      "action": "Create `docs/tasks/task_example.json` that demonstrates a complete task in the new format, adhering to the schema defined in `task_format.py`.",
      "acceptance": [
        "`docs/tasks/task_example.json` exists.",
        "The JSON is valid and conforms to the structure defined in `docs/tasks/task_format.py`."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`docs/tasks/task_example.json`"
    },
    {
      "id": "13.3",
      "status": "+",
      "title": "Write Migration Guide",
      "action": "Create `docs/tasks/TASKS_MIGRATION_GUIDE.md` detailing the step-by-step plan to migrate from the old format to the new one.",
      "acceptance": [
        "`docs/tasks/TASKS_MIGRATION_GUIDE.md` exists.",
        "The guide includes a migration plan, backward compatibility strategy, tooling requirements, and a rollback plan."
      ],
      "output": "`docs/tasks/TASKS_MIGRATION_GUIDE.md`"
    },
    {
      "id": "13.4",
      "status": "+",
      "title": "Update Task Authoring Guidance",
      "action": "Move `docs/TASK_FORMAT.md` to `docs/tasks/TASKS_GUIDANCE.md` and update its content to align with the new JSON format, removing schema definitions now covered by `task_format.py` and focusing on authoring best practices.",
      "acceptance": [
        "`docs/TASK_FORMAT.md` is removed.",
        "`docs/tasks/TASKS_GUIDANCE.md` exists.",
        "The content of the new guidance file is updated to reflect the JSON-based workflow."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`docs/tasks/TASKS_GUIDANCE.md`"
    },
    {
      "id": "13.5",
      "status": "+",
      "title": "Create Task Utility Tooling",
      "action": "Create a new tool module `scripts/tools/task_utils.py` with functions to reliably read, create, and update tasks in the new JSON format. This will abstract file I/O for task manipulation.",
      "acceptance": [
        "`scripts/tools/task_utils.py` exists.",
        "It contains functions like `get_task(task_id)`, `update_task(task_id, task_data)`, `create_task(...)`.",
        "Functions are well-documented and include error handling."
      ],
      "dependencies": [
        "13.1"
      ],
      "output": "`scripts/tools/task_utils.py`"
    },
    {
      "id": "13.6",
      "status": "+",
      "title": "Integrate Tooling into Orchestrator with Dual-Read Mode",
      "action": "Update the orchestrator (`run_local_agent.py`) to use `task_utils.py` for task operations. Implement a dual-read mode that can read from both `tasks/{id}/task.json` and the old `tasks/TASKS.md` during the transition period.",
      "acceptance": [
        "`run_local_agent.py` is updated to import and use `task_utils.py`.",
        "The orchestrator can correctly parse task information from both the old Markdown file and the new JSON file structure."
      ],
      "dependencies": [
        "13.5"
      ],
      "output": "Modified `scripts/run_local_agent.py`"
    },
    {
      "id": "13.7",
      "status": "+",
      "title": "Implement Migration Script",
      "action": "Create a script `scripts/migrate_tasks.py` that reads all tasks from `tasks/TASKS.md` and their corresponding plans and tests, and converts them to the new directory structure (`tasks/{id}/task.json`, `tasks/{id}/plan.md`, etc.).",
      "acceptance": [
        "`scripts/migrate_tasks.py` exists.",
        "The script can be run to perform the full migration of all existing tasks.",
        "The script correctly handles task descriptions, features from plans, and relocates test files."
      ],
      "dependencies": [
        "13.5"
      ],
      "output": "`scripts/migrate_tasks.py`"
    },
    {
      "id": "13.8",
      "status": "+",
      "title": "Embed Plans in JSON and Finalize Orchestrator",
      "action": "Complete the data migration and orchestrator update. This must be done in sequence: 1. Update `scripts/migrate_tasks.py` to embed `plan.md` content into a `plan` field within each task and feature object in `task.json`. 2. Run the script to perform the migration. 3. Validate that plan content is correctly moved and delete the source `plan.md` files. 4. Remove any dual-read/backward-compatibility logic from `run_local_agent.py`, ensuring it reads plans exclusively from `task.json`. 5. Verify the system works by running all tests.",
      "acceptance": [
        "The migration script is updated and successfully embeds all `plan.md` content into `task.json` files.",
        "All `plan.md` files are deleted after migration.",
        "`run_local_agent.py` is simplified to only read the `task.json` format.",
        "All project tests pass."
      ],
      "dependencies": [
        "13.7"
      ],
      "plan": "This feature will be executed by the Developer persona. The steps are: 1. Modify `scripts/migrate_tasks.py` to read each `tasks/{id}/plan.md`, parse its content, and insert it into the `plan` field of the corresponding `task.json` and its features. 2. Execute the modified migration script. 3. Delete the now-redundant `plan.md` files. 4. Modify `run_local_agent.py` to remove any logic for reading `plan.md` files, making `task.json` the single source of truth. 5. Run all tests using the `run_tests` tool to ensure the system is still functional."
    },
    {
      "id": "13.9",
      "status": "+",
      "title": "Update Docs and Tooling for Plan-in-JSON",
      "action": "Update documentation and scripts to align with the plan-in-JSON format. This includes updating `PLAN_SPECIFICATION.md` and `FILE_ORGANISATION.md`. Also, add a new helper function to `task_utils.py` for updating feature status directly in the `task.json` file, and expose it in the orchestrator.",
      "acceptance": [
        "`docs/PLAN_SPECIFICATION.md` is updated to describe the `plan` field in `task.json`.",
        "`docs/FILE_ORGANISATION.md` is updated to reflect that `plan.md` is deprecated.",
        "A new function, e.g., `update_feature_status(task_id, feature_id, new_status)`, exists in `scripts/tools/task_utils.py` and is available to the agent."
      ],
      "dependencies": [
        "13.8"
      ],
      "plan": "This feature has two parts: documentation and tooling. 1. (Planner/Developer) Update `docs/PLAN_SPECIFICATION.md` and `docs/FEATURE_FORMAT.md` to reflect that plans are now embedded in `task.json`. Also update `docs/FILE_ORGANISATION.md` to remove references to `plan.md`. 2. (Developer) Implement a new function `update_feature_status` in `scripts/tools/task_utils.py`. 3. (Developer) Expose this new function as a tool in `run_local_agent.py` so the agent can use it."
    },
    {
      "id": "13.12",
      "status": "-",
      "title": "Cleanup",
      "action": "This task definition file (`tasks/13/task.json`) will be removed as the final step of its own completion, closing the loop on the migration.",
      "acceptance": [
        "all tasks that are complete have their status set to `+`",
        "all tasks folders only have the tests folder and a `task.json` file",
        "any other feature in this task that was about cleanup or deprecation is removed",
        "any other feature that no longer applied should be refined or removed",
        "Task 1 was all about tasks - it needs be updated to reflect the new JSON-based format - essentially being migrated with this task. After which this whole task is removed."
      ],
      "dependencies": [
        "13.11"
      ],
      "plan": "Final cleanup of this migration task itself. The developer will review all features in this task, ensure completed ones are marked `+`, remove any now-redundant features, and most importantly, update Task 1 to reflect the new JSON-based task management system. After Task 1 is updated, this Task 13 definition can be removed."
    },
    {
      "id": "13.13",
      "status": "-",
      "title": "Final Migration and Cleanup",
      "action": "Task 1 requires updating",
      "acceptance": [
        "Task 1 was all about tasks - it needs be updated to reflect the new JSON-based format - essentially being migrated with this task."
      ],
      "dependencies": [
        "13.12"
      ],
      "plan": "This feature is a final check and transfer of ownership. The developer must ensure that Task 1, which defines the project's task management process, is fully updated to reflect the new JSON format. All relevant concepts from Task 13 (like JSON schema, tooling, etc.) should be integrated into Task 1. Once Task 1 is the new source of truth for the task system, this entire Task 13 and its directory can be deleted."
    }
  ]
}