{
  "id": 2,
  "status": "-",
  "title": "Agent tools and scripts",
  "description": "",
  "features": [
    {
      "id": "2.1",
      "status": "+",
      "title": "Git manager",
      "description": "implement the git manager scripts",
      "context": [
        "scripts/git_manager.py"
      ],
      "acceptance": [
        "`scripts/git_manager.py` exists",
        "inside the script a class `GitManager` is implemented with all the necessary methods to interact with git repositories"
      ]
    },
    {
      "id": "2.2",
      "status": "+",
      "title": "Task Utility Tooling",
      "description": "Provide and maintain utility functions for programmatic interaction with task files in `scripts/task_utils.py`.",
      "context": [
        "docs/tasks/task_format.py",
        "docs/AGENT_PLANNER.md",
        "docs/AGENT_TESTER.md",
        "docs/AGENT_DEVELOPER.md",
        "docs/FILE_ORGANISATION.md",
        "scripts/task_utils.py"
      ],
      "acceptance": [
        "`scripts/task_utils.py` exists.",
        "it directly references the interface schema from `task_format.py`",
        "it directly uses a reference to `GitManager` from `scripts/git_manager.py` inside function parameters whenever necessary",
        "it has all the tools specified in `AGENT_PLANNER.md`",
        "it has all the tools specified in `AGENT_TESTER.md`",
        "it has all the tools specified in `AGENT_DEVELOPER.md`",
        "all tools respect the file format defined in `docs/FILE_ORGANISATION.md`"
      ],
      "dependencies": [
        "2.1"
      ],
      "agent_question": "The AGENT_PLANNER spec lists an update_feature tool, but the orchestrator only exposes update_task_status, update_feature_status, and update_agent_question. How should the planner provide the detailed per-feature plan and context updates required by the specification?"
    },
    {
      "id": "2.3",
      "status": "+",
      "title": "Orchestrator script",
      "description": "Implement the local orchestrator script and setup, fully compliant with all the spec. It allows running an LLM agent to have conversations back and forth with tool calls.",
      "plan": "",
      "context": [
        "docs/AGENT_COMMUNICATION_PROTOCOL.md",
        "docs/agent_protocol_format.json",
        "scripts/git_manager.py",
        "scripts/tools_utils.py",
        "scripts/run_local_agent.py"
      ],
      "acceptance": [
        "`scripts/run_local_agent.py` exists and implements the orchestrator script.",
        "it abides to `docs/AGENT_COMMUNICATION_PROTOCOL.md` and implements the protocol format defined in `docs/agent_protocol_format.json`",
        "it directly uses a reference to `GitManager` from `scripts/git_manager.py` to perform git operations",
        "it directly uses `scripts/tools_utils.py` to call all appropriate tools",
        "The script has CLI options `--mode {mode_type}` where `mode_type` is either `single` (running just once) or `continuous` (running until there are no more tasks to work on)",
        "The script has the CLI required argument `--task {task_id}` and the optional one `--feature {feature_id}` to run specific tasks/features via prompt construction referencing `tasks/{task_id}/task.json`.",
        "The script has the CLI required argument `--agent {agent_type}` where `agent_type` is one of the following: `planner`, `tester`, or `developer`.",
        "The script has a function to gather context for each agent type in a clean way",
        "The script has a function to gather all available tools for each agent type in a clean way",
        "The script passes all the relevant data, and especially context and tools available, to the agent type to start a multi-way conversation that will result in tool calls",
        "The conversation continues for a given task in continuous mode until the agent decides to finish calling the `finish` tool.",
        "The conversation continues for a given task in single mode until the agent decides to finish a feature calling the `finish_feature` tool."
      ],
      "dependencies": [
        "2.1",
        "2.2"
      ]
    },
    {
      "id": "2.4",
      "status": "-",
      "title": "Dependency specification",
      "description": "Create `requirements.txt` listing all external libraries used by `scripts/run_local_agent.py`, `scripts/git_manager.py, `scripts/task_utils.py",
      "plan": "",
      "acceptance": [
        "`requirements.txt` exists"
      ],
      "dependencies": [
        "2.1",
        "2.2",
        "2.3"
      ]
    },
    {
      "id": "2.5",
      "status": "-",
      "title": "Environment variables template",
      "description": "Provide `.env.example` containing placeholders for required API keys and settings.",
      "plan": "1. Create the `.env.example` file in the project root. 2. Add placeholder variables for API keys needed by `litellm` (e.g., `OPENAI_API_KEY=your_key_here`). 3. Include comments to explain each variable's purpose.",
      "acceptance": [
        "`.env.example` exists and documents each variable."
      ],
      "dependencies": [
        "2.1"
      ],
      "rejection": "Deferred: Agent loop failed: litellm.BadRequestError: VertexAIException BadRequestError - {\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"* GenerateContentRequest.contents: contents is not specified\\n\",\n    \"status\": \"INVALID_ARGUMENT\"\n  }\n}\n"
    },
    {
      "id": "2.6",
      "status": "-",
      "title": "Local setup guide",
      "description": "Author `docs/LOCAL_SETUP.md` with setup and execution instructions.",
      "plan": "",
      "acceptance": [
        "`docs/LOCAL_SETUP.md` exists and is accurate."
      ],
      "dependencies": [
        "2.3",
        "2.4",
        "2.5"
      ]
    }
  ]
}