{
  "id": 2,
  "status": "-",
  "title": "Define Core Agent Terminology and Principles",
  "action": "Create the specification that defines the agent's high-level principles and establishes the key terms \"Orchestrator\" and \"Agent\". The agent uses a tool-based architecture.",

  "features": [
    {
      "id": "2.1",
      "status": "-",
      "title": "Tools guide",
      "action": "Specify the JSON contract, tools, and execution modes",
      "plan": "",
      "acceptance": [
        "`docs/TOOL_ARCHITECTURE.md` exists with all sections and tool definitions"
      ]
    },
    {
      "id": "2.2",
      "status": "-",
      "title": "principles guide",
      "action": "Define Agent vs Orchestrator and core principles.",
      "plan": "",
      "acceptance": [
        "`docs/AGENT_PRINCIPLES.md` exists and contains required definitions referencing the tools guide."
      ]
    },
    {
      "id": "2.3",
      "status": "-",
      "title": "Agent personas",
      "action": "Create 4 personas that will serve different purposes:\n   - Manager: An agent that looks at the task description and identifies any missing specification or context. They must identify all necessary information to be in place for the other agents to proceed with their work. They are responsible for seeing if the work has been done, or whether it couldn't due to bad/missing spec. This agent is the one that can edit the task description.\n   - Planner: An agent that looks at the task description and creates a plan for completing a task following the given specifications. This agent is the one that can edit the plan description.\n   - Tester: An agent that looks at the task description, and then for each feature creates the most appropriate acceptance criteria. Based on that criteria the agent creates a test case for each feature. This agent is the one that can edit the tests.\n   - Developer: An agent that looks at the task description, and for each feature, looks at the acceptance criteria, and develops the necesary result that satisfies the acceptance criteria.",
      "plan": "",
      "acceptance": [
        "`docs/AGENT_PERSONAS.md` exists and describes agent personas"
      ]
    },
    {
      "id": "2.4",
      "status": "-",
      "title": "Orchestrator script",
      "action": "Implement the local orchestrator script and setup, fully compliant with AGENT_PRINCIPLES and TOOL_ARCHITECTURE, including CLI options to run specific tasks/features and supporting local setup.",
      "plan": "",
      "acceptance": [
        "`scripts/run_local_agent.py` exists and implements the orchestrator script.",
        "The script has CLI options `--mode {mode_type}` where `mode_type` is either `single` (running just once) or `continuous` (running until there are no more tasks to work on)",
        "The script has the CLI required argument `--task {task_id}` and the optional one `--feature {feature_id}` to run specific tasks/features via prompt construction referencing `tasks/{task_id}/task.json`.",
        "Create a tool called `write_file` to write files.",
        "Create a tool called `retrieve_context_files` to return wanted files.",
        "Create a tool called `rename_files` to rename and move files.",
        "Create a tool called `submit_for_review` to create Git Pull Requests, where the branch naming follows `features/{task_id}`",
        "Create a tool called `ask_question` to indicate an agent wanting to ask a question about a feature being worked on. Calls the corresponding `scripts/task_utils.py` function",
        "Create a tool called `finish` to finish a task.",
        "Create a tool called `finish_feature` to finish a feature.",
        "Create a tool for moving a task to a different position in the list of tasks"

      ],
      "dependencies": ["2.1", "2.2", "2.3"]
    },
    {
      "id": "2.5",
      "status": "-",
      "title": "Dependency specification",
      "action": "Create `requirements.txt` listing all external libraries used by `scripts/run_local_agent.py`",
      "plan": "",
      "acceptance": [
        "`requirements.txt` exists "
      ],
      "dependencies": ["2.4"]
    },
    {
      "id": "2.6",
      "status": "-",
      "title": "Environment variables template",
      "action": "Provide `.env.example` containing placeholders for required API keys and settings.",
      "plan": "",
      "acceptance": [
        "`.env.example` exists and documents each variable."
      ],
      "dependencies": ["2.4"]
    },
    {
      "id": "2.7",
      "status": "-",
      "title": "Local setup guide",
      "action": "Author `docs/LOCAL_SETUP.md` with setup and execution instructions.",
      "plan": "",
      "acceptance": [
        "`docs/LOCAL_SETUP.md` exists and is accurate."
      ],
      "dependencies": ["2.4", "2.5", "2.6"]
    }
  ]
}