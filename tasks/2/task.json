{
  "id": 2,
  "status": "~",
  "title": "Define Core Agent Terminology and Principles",
  "action": "Create the specification that defines the agent's high-level principles and establishes the key terms \"Orchestrator\" and \"Agent\". The agent uses a tool-based architecture.",
  "plan": "1. Formulate detailed plans for each feature: the orchestrator script, dependencies, environment template, and setup guide. 2. Implement the orchestrator script (`run_local_agent.py`) with all specified tools and CLI arguments. 3. Create the `requirements.txt` file with all necessary libraries. 4. Create the `.env.example` file for environment configuration. 5. Write the `docs/LOCAL_SETUP.md` guide. 6. Ensure all features meet acceptance criteria before submission.",
  "features": [
    {
      "id": "2.1",
      "status": "+",
      "title": "Orchestrator script",
      "action": "Implement the local orchestrator script and setup, fully compliant with AGENT_PRINCIPLES and TOOL_ARCHITECTURE, including CLI options to run specific tasks/features and supporting local setup.",
      "plan": "1. Create the main script file `scripts/run_local_agent.py`. 2. Implement command-line argument parsing for `--mode`, `--task`, `--feature`, and `--persona`. 3. Implement an `Agent` class to manage the execution lifecycle. 4. Implement an `AgentTools` class to provide tool functionalities like `write_file`, `retrieve_context_files`, `rename_files`, `run_tests`, `submit_for_review`, `ask_question`, `finish`, and `finish_feature`. 5. Implement a `UnifiedEngine` class to handle prompt construction and LLM API calls. 6. Structure the main execution loop to gather context, call the LLM, parse the response, and execute tool calls. 7. Ensure tool implementations are modularized into the `scripts/tools/` directory.",
      "acceptance": [
        "`scripts/run_local_agent.py` exists and implements the orchestrator script.",
        "The script has CLI options `--mode {mode_type}` where `mode_type` is either `single` (running just once) or `continuous` (running until there are no more tasks to work on)",
        "The script has the CLI required argument `--task {task_id}` and the optional one `--feature {feature_id}` to run specific tasks/features via prompt construction referencing `tasks/{task_id}/task.json`.",
        "Create a tool called `write_file` to write files.",
        "Create a tool called `retrieve_context_files` to return wanted files.",
        "Create a tool called `rename_files` to rename and move files.",
        "Create a tool called `submit_for_review` to create Git Pull Requests, where the branch naming follows `features/{task_id}`",
        "Create a tool called `ask_question` to indicate an agent wanting to ask a question about a feature being worked on. Calls the corresponding `scripts/task_utils.py` function",
        "Create a tool called `finish` to finish a task.",
        "Create a tool called `finish_feature` to finish a feature.",
        "Create a tool called `move_task` to move a task to a different position in the list of tasks (and update all ids accordingly)"
      ]
    },
    {
      "id": "2.2",
      "status": "-",
      "title": "Dependency specification",
      "action": "Create `requirements.txt` listing all external libraries used by `scripts/run_local_agent.py`",
      "plan": "1. Identify all external dependencies, such as `litellm`, `python-dotenv`, and `GitPython`. 2. Create a `requirements.txt` file in the project root. 3. Add each dependency to the file on a new line.",
      "acceptance": [
        "`requirements.txt` exists"
      ],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.3",
      "status": "-",
      "title": "Environment variables template",
      "action": "Provide `.env.example` containing placeholders for required API keys and settings.",
      "plan": "1. Create the `.env.example` file in the project root. 2. Add placeholder variables for API keys needed by `litellm` (e.g., `OPENAI_API_KEY=your_key_here`). 3. Include comments to explain each variable's purpose.",
      "acceptance": [
        "`.env.example` exists and documents each variable."
      ],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.4",
      "status": "-",
      "title": "Local setup guide",
      "action": "Author `docs/LOCAL_SETUP.md` with setup and execution instructions.",
      "plan": "1. Create the file `docs/LOCAL_SETUP.md`. 2. Add a 'Setup Instructions' section detailing repository cloning, virtual environment setup, dependency installation from `requirements.txt`, and `.env` file configuration. 3. Add an 'Execution' section with example commands for running `scripts/run_local_agent.py`.",
      "acceptance": [
        "`docs/LOCAL_SETUP.md` exists and is accurate."
      ],
      "dependencies": [
        "2.1",
        "2.2",
        "2.3"
      ]
    }
  ]
}