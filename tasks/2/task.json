{
  "id": 2,
  "status": "-",
  "title": "Agent tools and scripts",
  "action": "",
  "plan": "",
  "features": [
    {
      "id": "2.1",
      "status": "-",
      "title": "Git manager",
      "action": "implement the git manager scripts",
      "acceptance": [
        "`scripts/git_manager.py` exists all necessary git related functions"
      ]
    },
    {
      "id": "2.2",
      "status": "-",
      "title": "Task Utility Tooling",
      "action": "Provide and maintain utility functions for programmatic interaction with task files in `scripts/tools/task_utils.py`.",
      "context": [
        "docs/tasks/task_format.py",
        "docs/AGENT_PERSONAS_PLANNER.md",
        "docs/AGENT_PERSONAS_TESTER.md",
        "docs/AGENT_PERSONAS_DEVELOPER.md",
        "docs/FILE_ORGANISATION.md"
      ],
      "acceptance": [
        "`scripts/tools/task_utils.py` exists.",
        "it directly references the interface schema from `task_format.py`",
        "it directly uses a reference to `GitManager` from `scripts/git_manager.py` inside function parameters whenever necessary",
        "it has all the tools specified in `AGENT_PERSONAS_PLANNER.md`",
        "it has all the tools specified in `AGENT_PERSONAS_TESTER.md`",
        "it has all the tools specified in `AGENT_PERSONAS_DEVELOPER.md`",
        "all tools respect the file format defined in `docs/FILE_ORGANISATION.md`"
      ],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.3",
      "status": "-",
      "title": "Orchestrator script",
      "action": "Implement the local orchestrator script and setup, fully compliant with all the spec. It allows running an LLM agent to have conversations back and forth with tool calls.",
      "plan": "",
      "acceptance": [
        "`scripts/run_local_agent.py` exists and implements the orchestrator script.",
        "a json format exists that specifies how each agent should return the response to the orchestrator script",
        "The script has CLI options `--mode {mode_type}` where `mode_type` is either `single` (running just once) or `continuous` (running until there are no more tasks to work on)",
        "The script has the CLI required argument `--task {task_id}` and the optional one `--feature {feature_id}` to run specific tasks/features via prompt construction referencing `tasks/{task_id}/task.json`.",
        "The script has the CLI required argument `--agent {agent_type}` where `agent_type` is one of the following: `planner`, `tester`, or `developer`.",
        "The script "
        "`AGENT_PERSONAS_PLANNER.md`, `AGENT_PERSONAS_TESTER.md`, and `AGENT_PERSONAS_DEVELOPER.md` are referenced in the script and an agent can call any of the tools specified by returning an appropriate message",

      ]
    },
    {
      "id": "2.2",
      "status": "-",
      "title": "Dependency specification",
      "action": "Create `requirements.txt` listing all external libraries used by `scripts/run_local_agent.py`",
      "plan": "1. Identify all external dependencies, such as `litellm`, `python-dotenv`, and `GitPython`. 2. Create a `requirements.txt` file in the project root. 3. Add each dependency to the file on a new line.",
      "acceptance": [
        "`requirements.txt` exists"
      ],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.3",
      "status": "-",
      "title": "Environment variables template",
      "action": "Provide `.env.example` containing placeholders for required API keys and settings.",
      "plan": "1. Create the `.env.example` file in the project root. 2. Add placeholder variables for API keys needed by `litellm` (e.g., `OPENAI_API_KEY=your_key_here`). 3. Include comments to explain each variable's purpose.",
      "acceptance": [
        "`.env.example` exists and documents each variable."
      ],
      "dependencies": [
        "2.1"
      ]
    },
    {
      "id": "2.4",
      "status": "-",
      "title": "Local setup guide",
      "action": "Author `docs/LOCAL_SETUP.md` with setup and execution instructions.",
      "plan": "1. Create the file `docs/LOCAL_SETUP.md`. 2. Add a 'Setup Instructions' section detailing repository cloning, virtual environment setup, dependency installation from `requirements.txt`, and `.env` file configuration. 3. Add an 'Execution' section with example commands for running `scripts/run_local_agent.py`.",
      "acceptance": [
        "`docs/LOCAL_SETUP.md` exists and is accurate."
      ],
      "dependencies": [
        "2.1",
        "2.2",
        "2.3"
      ]
    }
  ]
}
